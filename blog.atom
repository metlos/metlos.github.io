<?xml version="1.0" encoding="utf-8" ?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <id>http://lukas.krejci.pw/</id>
  <title>Reinventing The Wheel</title>
  <updated>2014-11-24T23:25:00+01:00</updated>
  <link href="http://lukas.krejci.pw/blog.atom" rel="self" type="application/atom+xml" />
  <link href="http://lukas.krejci.pw/" rel="alternate" type="text/html" />
  <entry>
    <id>http://lukas.krejci.pw/posts/2014/03/26/my-git-aliases/</id>
    <title>My git aliases</title>
    <updated>2014-11-24T23:25:00+01:00</updated>
    <published>2014-03-26T00:00:00+00:00</published>
    <link href="http://lukas.krejci.pw/posts/2014/03/26/my-git-aliases/" rel="alternate" type="text/html" />
    <category term="git"></category>
    <summary>
      
      Just a short note about the useful git aliases I&#8217;ve came up with during
      the course of my daily work with git and github.
      
      
      Although it&#8217;s been done by different people several times, I also came up
      with some shortcuts to work with github&#8217;s pull requests from the
      commandline. I tend to use github&#8217;s website only for commenting on the pull
      requests but I like to do the rest locally in my repository (including the
      merge of the pull request). Checkout this
      gist where I keep my aliases.
      ...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Just a short note about the useful git aliases I’ve came up with during
      the course of my daily work with git and github.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Although it’s been done by different people several times, I also came up
      with some shortcuts to work with github’s pull requests from the
      commandline. I tend to use github’s website only for commenting on the pull
      requests but I like to do the rest locally in my repository (including the
      merge of the pull request). Checkout this
      &lt;a href=&quot;https://gist.github.com/metlos/9368527&quot;&gt;gist&lt;/a&gt; where I keep my aliases.&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://lukas.krejci.pw/posts/2013/09/05/phantom-reads-and-data-paging/</id>
    <title>Phantom reads and data paging</title>
    <updated>2014-11-24T23:25:00+01:00</updated>
    <published>2013-09-05T00:00:00+00:00</published>
    <link href="http://lukas.krejci.pw/posts/2013/09/05/phantom-reads-and-data-paging/" rel="alternate" type="text/html" />
    <category term="rhq"></category>
    <category term="database"></category>
    <summary>
      
      Paging through the results is easy, right?
      
      
      The client only needs to supply the number of rows to skip and the
      maximum number of rows it wants returned (aka the page number and the
      page size). The server then returns the data along with the information
      about the total number of results available. Et voila you have all the
      information you need. The number of rows to skip together with the page
      size give you the information about what page you&#8217;re showing and the
      page size with the total number of rows gives you the total number of
      pages available. Nothing too difficult or complex.
      
      
      But there&#8217;s a catch....
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Paging through the results is easy, right?&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The client only needs to supply the number of rows to skip and the
      maximum number of rows it wants returned (aka the page number and the
      page size). The server then returns the data along with the information
      about the total number of results available. Et voila you have all the
      information you need. The number of rows to skip together with the page
      size give you the information about what page you’re showing and the
      page size with the total number of rows gives you the total number of
      pages available. Nothing too difficult or complex.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;But there’s a catch. On the server, one needs to perform (at least) two
      queries - one query to get the data for the requested page and the
      second query to fetch the total number of rows. Now most of the
      databases set the default transaction isolation level to READ_COMMITTED
      and for very good reasons. But this transaction isolation level allows
      for phantom reads, i.e. 2 queries in the same transaction might &quot;see&quot;
      different number of rows of data, if another transaction committed and
      added or deleted rows that would be returned by the queries. So, it may
      happen that you will:&lt;br&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;return &quot;rows 5 to 10 out of 2 total&quot;,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;say &quot;there are no available results on the first page, while the total
      number of rows is 5&quot;,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;etc.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;All that info acquired within one transaction.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;What can you do about such situations? The obvious solution is to just
      admit that these things can happen ;) Another option is to try and
      detect if such situation might have occured and re-try.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I’ve come up with the following rules for consistency of the results:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;&lt;code&gt;N&lt;/code&gt;&lt;/strong&gt; is the actual number of elements on the page, &lt;strong&gt;&lt;code&gt;P&lt;/code&gt;&lt;/strong&gt; is the maximum
      number of elements on the page (i.e. the page size), &lt;strong&gt;&lt;code&gt;I&lt;/code&gt;&lt;/strong&gt; is the number
      of rows to skip and &lt;strong&gt;&lt;code&gt;T&lt;/code&gt;&lt;/strong&gt; is total number of results.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;T &amp;lt; I &amp;amp;&amp;amp; N == 0&lt;/code&gt;. This means we’re trying to show a page that is past
      the total number of results. We therefore expect the collection to be
      empty.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;T - I &amp;gt; P &amp;amp;&amp;amp; N == P&lt;/code&gt;. If we are are not showing the last page, the
      number of elements in the collection should be equal to the page size.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;T - I ⇐ P &amp;amp;&amp;amp; N == T - I&lt;/code&gt;. If showing the last page, the collection
      should have all the remaining elements in it.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;These are kind of obvious assumptions but phantom read can easily break
      them and therefore one should be checking them if one wants to be
      serious about returning meaningful results to the user.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So while paging is simple in principle, there are a couple of
      interesting corner cases that one needs to handle if one reads data out
      of a dynamic data set. It took us a good couple of years in
      &lt;a href=&quot;http://www.jboss.org/rhq&quot;&gt;RHQ&lt;/a&gt; to get to the bottom of this but hopefully
      now our paging is more robust than it was before.&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://lukas.krejci.pw/posts/2012/09/27/scripting-news-in-rhq-4-5-0/</id>
    <title>Scripting News in RHQ 4.5.0</title>
    <updated>2014-11-24T23:25:00+01:00</updated>
    <published>2012-09-27T00:00:00+00:00</published>
    <link href="http://lukas.krejci.pw/posts/2012/09/27/scripting-news-in-rhq-4-5-0/" rel="alternate" type="text/html" />
    <category term="java"></category>
    <category term="rhq"></category>
    <category term="scripting"></category>
    <category term="javascript"></category>
    <category term="python"></category>
    <summary>
      
      RHQ 4.5.0
      (which we released today) contains a great deal of scripting
      enhancements that I think are worth talking about in more detail. In my
      eyes, the changes make the scripting in RHQ ready for serious use.
      
      
      CommonJS support
      
      This, I think, is huge. In the previous versions of RHQ, the only way of
      reusing functionality from another script was to use the exec -f
      command in the interactive CLI shell (in another words, this was NOT
      available in the batch mode, which is how majority of people are using
      the CLI). So if you needed to implement something bigger and needed to
      split your code in several files (as...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://docs.jboss.org/author/display/RHQ/Release+Notes+4.5.0&quot;&gt;RHQ 4.5.0&lt;/a&gt;
      (which we released today) contains a great deal of scripting
      enhancements that I think are worth talking about in more detail. In my
      eyes, the changes make the scripting in RHQ ready for serious use.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;commonjs-support&quot;&gt;
      &lt;a class=&quot;anchor&quot; href=&quot;#commonjs-support&quot;&gt;&lt;/a&gt;CommonJS support&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This, I think, is huge. In the previous versions of RHQ, the only way of
      reusing functionality from another script was to use the &lt;code&gt;exec -f&lt;/code&gt;
      command in the interactive CLI shell (in another words, this was NOT
      available in the batch mode, which is how majority of people are using
      the CLI). So if you needed to implement something bigger and needed to
      split your code in several files (as any sane person would do), you only
      had 1 option - before executing the &quot;script&quot;, you needed to concatenate
      all the scripts together.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This sucked big time and we knew it ;) But we didn’t want to just add
      functionality to &quot;include files&quot; - that would be too easy ;) At the same
      time it wouldn’t solve the problem, really. The problem with just
      &quot;including&quot; the files into the current &quot;scope&quot; of the script is that
      this would mean that each and every variable or function in those files
      would have to be uniquely named because javascript lacks any sort of
      namespace/package resolution. Fortunately, the
      &lt;a href=&quot;http://commonjs.org&quot;&gt;CommonJS&lt;/a&gt; spec solves this problem.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Here’s how you use a module. Notice that you assign the module to a
      variable and that’s how you prevent the &quot;pollution&quot; of your scope. The
      loaded module can have methods and variables with the same name as your
      script and they won’t influence each other:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
        &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
      2&lt;/pre&gt;&lt;/td&gt;
        &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myfuncs = require(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;modules:/myfuncs&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
      myfuncs.helloworld();&lt;/pre&gt;&lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You may wonder what that &lt;code&gt;&quot;modules:/myfuncs&quot;&lt;/code&gt; identifier means. It is an
      URI that the underlying library uses to locate the script to load. This
      &quot;sourcing&quot; mechanism is pluggable and I will talk about it more in the
      following chapter. To see some examples of the modules, you can look at
      the
      &lt;a href=&quot;http://git.fedorahosted.org/cgit/rhq/rhq.git/tree/modules/enterprise/remoting/cli/src/main/samples/modules&quot;&gt;&lt;code&gt;samples/modules&lt;/code&gt;&lt;/a&gt;
      directory of your CLI deployment and you can also read some
      documentation about this on
      &lt;a href=&quot;https://docs.jboss.org/author/display/RHQ/Script+Modularity+-+Javascript&quot;&gt;our
      wiki&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;locating-the-scripts&quot;&gt;
      &lt;a class=&quot;anchor&quot; href=&quot;#locating-the-scripts&quot;&gt;&lt;/a&gt;Locating the scripts&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;With the ability to load the scripts there comes the problem of locating
      them. For the standalone CLI, the obvious location for them is the
      filesystem, but what about alert notification scripts on the RHQ server?
      These scripts are stored in RHQ repositories which don’t have a
      filesystem location. The solution is not to tie the scripts to the
      filesystem but have a generic way of locating them using URIs and a
      pluggable way of resolving those URIs and loading the scripts from
      various locations. This means that you can for example load the script
      from an RHQ repository in your standalone CLI installation, or to define
      1 central location for your local CLI scripts and use the &quot;modules&quot; URIs
      to refer to them. Or you can easily implement your own &quot;source provider&quot;
      and for example load the scripts from your internal git repo or ftp or
      whatnot. RHQ comes with a small set of predefined source providers,
      documented
      &lt;a href=&quot;https://docs.jboss.org/author/display/RHQ/Script+Sources&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;With this ability at hand, you can make an RHQ repository a central
      place for your scripts that you will then be able to use universally -
      both in the standalone CLI installations and also in the alert
      notification scripts.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;python&quot;&gt;
      &lt;a class=&quot;anchor&quot; href=&quot;#python&quot;&gt;&lt;/a&gt;Python&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In previous versions, our scripting was tied to Javascript. Thanks to
      quite a bit of refactoring, the RHQ scripting integration is now
      language independent and language support is pluggable (see my previous
      &lt;a href=&quot;http://metlos.wordpress.com/2012/07/12/rhq-speaks-python/&quot;&gt;post&lt;/a&gt; where I
      detail how this was done in case of Python).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;What this all means is that you can now write your CLI scripts in Python
      and still use the same API as you were able to use before from
      Javascript only. I.e. you will find the &lt;code&gt;ResourceManager&lt;/code&gt;,
      &lt;code&gt;AlertManager&lt;/code&gt; and all the other predefined variables that define the
      RHQ API available in Python, too. The only thing that this initial
      implementation doesn’t support is code-completion in the interactive CLI
      shell.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Last but not least, the ability load the scripts from various locations
      is available in Python, too, using an automatically installed
      &lt;a href=&quot;http://www.python.org/dev/peps/pep-0302/&quot;&gt;path_hook&lt;/a&gt;. You can read about
      how to use it on our
      &lt;a href=&quot;https://docs.jboss.org/author/display/RHQ/Script+Modularity+-+Python&quot;&gt;wiki&lt;/a&gt;.
      This also means that you can now write your alert notification scripts
      in Python, too.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When running an alert notification script (i.e. an alert notification of
      the type &quot;CLI Script&quot;), the language of the script is determined from
      the script file extension - &quot;.py&quot; for python and &quot;.js&quot; for javascript.
      When you start the CLI shell, you pass your language of choice using the
      &lt;code&gt;--language&lt;/code&gt; commandline parameter - &quot;javascript&quot; or &quot;python&quot; are the
      obvious possible values for it.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;conclusion&quot;&gt;
      &lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In my opinion, these changes are great and will allow our users to
      really start building useful tools using our scripting support. If you
      feel like you’ve come up with a script module you would like to share
      with the RHQ community, why don’t you just send a pull request to our
      github &lt;a href=&quot;https://github.com/rhq-project/samples&quot;&gt;repo&lt;/a&gt; with sample scripts?&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://lukas.krejci.pw/posts/2012/09/14/the-dark-powers-of-powermock/</id>
    <title>The Dark Powers of PowerMock</title>
    <updated>2014-11-24T23:25:00+01:00</updated>
    <published>2012-09-14T00:00:00+00:00</published>
    <link href="http://lukas.krejci.pw/posts/2012/09/14/the-dark-powers-of-powermock/" rel="alternate" type="text/html" />
    <category term="java"></category>
    <category term="rhq"></category>
    <category term="powermock"></category>
    <category term="testing"></category>
    <summary>
      
      Recently, we&#8217;ve started using Mockito
      and PowerMock in our testing. I
      won&#8217;t explain mocking and why or why not you should use it, but I want
      to share my experience with using PowerMock.
      
      
      PowerMock comes with a very strong promise: "PowerMock uses a custom
      classloader and bytecode manipulation to enable mocking of static
      methods, constructors, final classes and methods, private methods,
      removal of static initializers and more."
      
      
      That is seriously cool, right? I thought so, too, but I stumbled upon
      several problems the very first time I tried to use it. Frankly, those
      problems, as always, stemmed from my lack of experience with the tool,
      but hey - everyone&#8217;s a novice...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Recently, we’ve started using &lt;a href=&quot;http://code.google.com/p/mockito/&quot;&gt;Mockito&lt;/a&gt;
      and &lt;a href=&quot;http://code.google.com/p/powermock/&quot;&gt;PowerMock&lt;/a&gt; in our testing. I
      won’t explain mocking and why or why not you should use it, but I want
      to share my experience with using PowerMock.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;code&gt;PowerMock&lt;/code&gt; comes with a very strong promise: &quot;PowerMock uses a custom
      classloader and bytecode manipulation to enable mocking of static
      methods, constructors, final classes and methods, private methods,
      removal of static initializers and more.&quot;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;That is seriously cool, right? I thought so, too, but I stumbled upon
      several problems the very first time I tried to use it. Frankly, those
      problems, as always, stemmed from my lack of experience with the tool,
      but hey - everyone’s a novice at first. Let me share my experience with
      you.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;the-problem&quot;&gt;
      &lt;a class=&quot;anchor&quot; href=&quot;#the-problem&quot;&gt;&lt;/a&gt;The Problem&lt;/h4&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
        &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
      2
      3
      4
      5
      6
      7&lt;/pre&gt;&lt;/td&gt;
        &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;ClassUnderTest&lt;/span&gt; {
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;InputStream&lt;/span&gt; method(&lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; param, &lt;span class=&quot;predefined-type&quot;&gt;URI&lt;/span&gt; uri) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;Exception&lt;/span&gt; {
              &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; scheme = param ? &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
              &lt;span class=&quot;predefined-type&quot;&gt;URI&lt;/span&gt; replacedUri = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;URI&lt;/span&gt;(scheme, uri.getAuthority(), uri.getPath(), uri.getQuery(), uri.getFragment());
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; replacedUri.toURL().openStream();
          }
      }&lt;/pre&gt;&lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The above fabricated example expresses the essence of the testing
      challenge I faced (the real class was
      &lt;a href=&quot;http://git.fedorahosted.org/cgit/rhq/rhq.git/tree/modules/enterprise/remoting/client-api/src/main/java/org/rhq/enterprise/clientapi/RhqDownloadsScriptSourceProvider.java&quot;&gt;this&lt;/a&gt;.)
      The method I wanted to test obtains an URI and transforms it based on
      some parameters. Then it tries to open a stream on the URI so that the
      caller can download the contents.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Because the URI that the method tries to download from is by design
      either http or https URL, it is kind of hard to test without actually
      standing up a HTTP server to serve the file during the test. This is of
      course not impossible and possibly would not be that hard, but I thought
      &lt;code&gt;PowerMock&lt;/code&gt; can come here to the rescue. I should be able to mock those
      calls out in my tests.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;attempt-1-mocking-system-classes&quot;&gt;
      &lt;a class=&quot;anchor&quot; href=&quot;#attempt-1-mocking-system-classes&quot;&gt;&lt;/a&gt;Attempt #1 - mocking system classes&lt;/h4&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
        &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
      2
      3
      4
      5
      6
      7
      8
      9
      &lt;strong&gt;10&lt;/strong&gt;
      11
      12
      13
      14
      15
      16
      17
      18
      19
      &lt;strong&gt;20&lt;/strong&gt;&lt;/pre&gt;&lt;/td&gt;
        &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;annotation&quot;&gt;@Test&lt;/span&gt;
      &lt;span class=&quot;annotation&quot;&gt;@PrepareForTest&lt;/span&gt;(ClassUnderTest.class)
      &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;MyTest&lt;/span&gt; {
          &lt;span class=&quot;annotation&quot;&gt;@ObjectFactory&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; IObjectFactory getObjectFactory() {
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PowerMockObjectFactory();
          }
      
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; testMethod() &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;Exception&lt;/span&gt; {
              &lt;span class=&quot;predefined-type&quot;&gt;URI&lt;/span&gt; uriMock = PowerMockito.mock(&lt;span class=&quot;predefined-type&quot;&gt;URI&lt;/span&gt;.class);
              &lt;span class=&quot;predefined-type&quot;&gt;URL&lt;/span&gt; urlMock = PowerMockito.mock(&lt;span class=&quot;predefined-type&quot;&gt;URL&lt;/span&gt;.class);
      
              PowerMockito.whenNew(&lt;span class=&quot;predefined-type&quot;&gt;URI&lt;/span&gt;.class).withArguments(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;).thenReturn(uriMock);
              Mockito.when(uriMock.toURL()).thenReturn(urlMock);
              Mockito.when(urlMock.openStream()).thenReturn(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;FileInputStream&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;File&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;existing.file&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)));
      
              ClassUnderTest testObject = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ClassUnderTest();
              testObject.method(&lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;URI&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;blah://localhost&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;));
          }
      }&lt;/pre&gt;&lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This should be fairly easy to understand for everyone that used some
      mocking framework. I’m creating two mocks: one for URI and one for URL
      classes. Then I’m using PowerMock to capture the construction of a new
      URI (see the code of the ClassUnderTest) and returning my &lt;code&gt;uriMock&lt;/code&gt;. The
      uriMock is set up to return the &lt;code&gt;urlMock&lt;/code&gt; when its &lt;code&gt;toURL()&lt;/code&gt; method is
      called. When the &lt;code&gt;openStream()&lt;/code&gt; method is called on my &lt;code&gt;urlMock&lt;/code&gt;, I’m
      returning an input stream of a local file.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Nice and easy, right? Except it doesn’t work. I get the following
      stacktrace as soon as I try to mock the URI class:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;org.mockito.exceptions.base.MockitoException: Mockito cannot mock this class: class replica.java.net.URI$$PowerMock0 Mockito can only mock visible &amp;amp; non-final classes.&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;After a bit of googling, the cause is apparent - PowerMock cannot mock
      the system classes (unless PowerMock java agent is used). Ok, let’s try
      another approach, this time trying to avoid using mocks.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;attempt-2-powermockito-whennew-url-class&quot;&gt;
      &lt;a class=&quot;anchor&quot; href=&quot;#attempt-2-powermockito-whennew-url-class&quot;&gt;&lt;/a&gt;Attempt #2 - PowerMockito.whenNew(URL.class)&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The idea behind this attempt is that &lt;code&gt;PowerMockito&lt;/code&gt; can capture and
      override constructor calls. Because &lt;code&gt;URI.toURL()&lt;/code&gt; constructs a new URL
      instance with a single string argument, so we theoretically should be
      able to intercept that?&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
        &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
      2
      3
      4
      5
      6
      7
      8&lt;/pre&gt;&lt;/td&gt;
        &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; testMethod() &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;Exception&lt;/span&gt; {
          &lt;span class=&quot;predefined-type&quot;&gt;URL&lt;/span&gt; realUrl = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;File&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;existing.file&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;).toURI().toURL();
      
          PowerMockito.whenNew(&lt;span class=&quot;predefined-type&quot;&gt;URL&lt;/span&gt;.class).withArguments(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://localhost&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;).thenReturn(realUrl);
      
          ClassUnderTest testObject = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ClassUnderTest();
          testObject.method(&lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;URI&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;blah://localhost&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;));
      }&lt;/pre&gt;&lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As you might have guessed, this doesn’t work either. And frankly if it
      did, I’d have some serious questions about how it could. The constructor
      of &lt;code&gt;URL&lt;/code&gt; is only called inside the &lt;code&gt;toURL()&lt;/code&gt; of the &lt;code&gt;URI&lt;/code&gt; which is a
      system class that PowerMock can’t touch. So, the third attempt.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;attempt-3-powermockito-whennew-uri-class&quot;&gt;
      &lt;a class=&quot;anchor&quot; href=&quot;#attempt-3-powermockito-whennew-uri-class&quot;&gt;&lt;/a&gt;Attempt #3 - PowerMockito.whenNew(URI.class)&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;What is the difference between this one and the previous attempt? Well,
      it took me a while to decipher the
      &lt;a href=&quot;http://powermock.googlecode.com/svn/docs/powermock-1.3.5/apidocs/org/powermock/core/classloader/annotations/PrepareForTest.html&quot;&gt;javadoc&lt;/a&gt;
      for the &lt;code&gt;@PrepareForTest&lt;/code&gt; annotation, but it boils down to this. If you
      need to use the &lt;code&gt;PowerMockito.whenNew&lt;/code&gt; method, you need to tell
      PowerMock to do bytecode manipulation on the class that (in some method)
      &lt;strong&gt;directly calls&lt;/strong&gt; given constructor. This is kinda understandable when
      you know what PowerMock is doing - it will actually change the byte code
      of the &quot;prepared&quot; class so that any constructor calls (and other things)
      are checking for the rules defined using &lt;code&gt;whenNew&lt;/code&gt; and other methods.
      You realize this for real when you try to debug the class under test
      (that has been prepared by power mock) - you can no longer be sure that
      what you see in the code is actually what is happening, because the
      bytecode of the class no longer exactly corresponds to what you see in
      the source code.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So to sum it up, here’s the code that works:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
        &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
      2
      3
      4
      5
      6
      7
      8
      9
      &lt;strong&gt;10&lt;/strong&gt;
      11
      12
      13
      14
      15
      16&lt;/pre&gt;&lt;/td&gt;
        &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;annotation&quot;&gt;@Test&lt;/span&gt;
      &lt;span class=&quot;annotation&quot;&gt;@PrepareForTest&lt;/span&gt;(ClassUnderTest.class)
      &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;MyTest&lt;/span&gt; {
          &lt;span class=&quot;annotation&quot;&gt;@ObjectFactory&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; IObjectFactory getObjectFactory() {
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PowerMockObjectFactory();
          }
      
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; testMethod() &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;Exception&lt;/span&gt; {
              &lt;span class=&quot;predefined-type&quot;&gt;URI&lt;/span&gt; realUri = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;File&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;existing.file&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;).toURI();
              PowerMockito.whenNew(&lt;span class=&quot;predefined-type&quot;&gt;URI&lt;/span&gt;.class).withArguments(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;).thenReturn(realUri);
      
              ClassUnderTest testObject = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ClassUnderTest();
              testObject.method(&lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;URI&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;blah://localhost&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;));
          }
      }&lt;/pre&gt;&lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The constructor of the &lt;code&gt;URI&lt;/code&gt; is intercepted and we return a &quot;realUri&quot;,
      i.e. a different instance of otherwise &quot;normal&quot; URI class. This works,
      because exactly that constructor with those arguments is called in the
      class under test that has been manipulated by PowerMock (as instructed
      by the &lt;code&gt;@PrepareForTest&lt;/code&gt; annotation). From that point on, we don’t need
      any special behavior on either the &lt;code&gt;URI&lt;/code&gt; or &lt;code&gt;URL&lt;/code&gt; classes and so the
      code can stay untouched.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;conclusion&quot;&gt;
      &lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The conclusion is basically the famous 4 letters - RTFM :-) I just
      wanted to detail my journey through the dark corners of the PowerMock
      forest just in case some of you were as confused as I was when I first
      entered it.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://lukas.krejci.pw/posts/2012/07/12/rhq-speaks-python/</id>
    <title>RHQ speaks Python</title>
    <updated>2014-11-24T23:25:00+01:00</updated>
    <published>2012-07-12T00:00:00+00:00</published>
    <link href="http://lukas.krejci.pw/posts/2012/07/12/rhq-speaks-python/" rel="alternate" type="text/html" />
    <category term="java"></category>
    <category term="rhq"></category>
    <category term="scripting"></category>
    <category term="python"></category>
    <summary>
      
      In the past few weeks I was quite busy refactoring RHQ&#8217;s CLI and
      scripting integration. Funnily enough it all started because we wanted
      to add the support for CommonJS modules to our javascript interface.
      During the course of the refactoring, I found out that I&#8217;m actually
      heading in the direction of completely separating the "language" support
      from the rest of the RHQ, which then only speaks to it through the
      Java&#8217;s standard scripting APIs which are language independent.
      
      
      RHQ&#8217;s CLI was originally only implemented for and tightly coupled with
      javascript for which the JRE has support by default. The problem we had
      was that the version of Rhino (i.e....
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In the past few weeks I was quite busy refactoring RHQ’s CLI and
      scripting integration. Funnily enough it all started because we wanted
      to add the support for CommonJS modules to our javascript interface.
      During the course of the refactoring, I found out that I’m actually
      heading in the direction of completely separating the &quot;language&quot; support
      from the rest of the RHQ, which then only speaks to it through the
      Java’s standard scripting APIs which are language independent.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;RHQ’s CLI was originally only implemented for and tightly coupled with
      javascript for which the JRE has support by default. The problem we had
      was that the version of Rhino (i.e. the Javascript implementation Java
      uses) that is bundled with the JRE does not support CommonJS modules
      while the newer versions do.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;But this is about Python, right? So once I saw that we have a nice
      little API that one can implement to add support for another language, I
      thought why not try bringing another language to RHQ? The obvious choice
      was Python - the most popular language among the ones that can integrate
      with Java. So I grabbed Jython and started looking if would be possible
      to do with it everything we needed to do to implement our API. And it
      turned out it was - a mere 200 lines of Java code and RHQ can speak
      Python :)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Let’s look at how the API we needed implement looked like:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
        &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
      2
      3
      4
      5
      6
      7
      8
      9
      &lt;strong&gt;10&lt;/strong&gt;
      11
      12
      13
      14
      15
      16
      17
      18&lt;/pre&gt;&lt;/td&gt;
        &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;PythonScriptEngineProvider&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;implements&lt;/span&gt; ScriptEngineProvider {
      
          &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; getSupportedLanguage() {
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
          }
      
          &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; ScriptEngineInitializer getInitializer() {
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PythonScriptEngineInitializer();
          }
      
          &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; CodeCompletion getCodeCompletion() {
              &lt;span class=&quot;comment&quot;&gt;// XXX are we gonna support code completion for multiple langs in the CLI?&lt;/span&gt;
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;;
          }
      }&lt;/pre&gt;&lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Now that’s quite trivial, isn’t it? :) Of course, this is the basic
      interface which just delegates the real work to other classes. So let’s
      look at the &lt;code&gt;ScriptEngineInitializer&lt;/code&gt; - the class that really does the
      all the important work:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
        &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
      2
      3
      4
      5
      6
      7
      8
      9
      &lt;strong&gt;10&lt;/strong&gt;
      11
      12
      13
      14
      15
      16
      17
      18
      19
      &lt;strong&gt;20&lt;/strong&gt;
      21
      22
      23
      24
      25
      26
      27
      28
      29
      &lt;strong&gt;30&lt;/strong&gt;
      31
      32
      33
      34
      35
      36
      37
      38
      39
      &lt;strong&gt;40&lt;/strong&gt;
      41
      42
      43
      44
      45
      46
      47
      48
      49
      &lt;strong&gt;50&lt;/strong&gt;
      51
      52
      53
      54
      55
      56
      57
      58
      59
      &lt;strong&gt;60&lt;/strong&gt;
      61
      62
      63
      64
      65
      66
      67
      68
      69
      &lt;strong&gt;70&lt;/strong&gt;
      71
      72
      73
      74
      75
      76
      77
      78
      79
      &lt;strong&gt;80&lt;/strong&gt;
      81
      82
      83
      84&lt;/pre&gt;&lt;/td&gt;
        &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;PythonScriptEngineInitializer&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;implements&lt;/span&gt; ScriptEngineInitializer {
      
          &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;final&lt;/span&gt; Log LOG = LogFactory.getLog(PythonScriptEngineInitializer.class);
      
          &lt;span class=&quot;directive&quot;&gt;static&lt;/span&gt; {
              &lt;span class=&quot;predefined-type&quot;&gt;Properties&lt;/span&gt; props = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Properties&lt;/span&gt;();
              props.put(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;python.packages.paths&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;java.class.path,sun.boot.class.path&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
              props.put(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;python.packages.directories&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;java.ext.dirs&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
              props.put(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;python.cachedir.skip&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;);
              PythonInterpreter.initialize(&lt;span class=&quot;predefined-type&quot;&gt;System&lt;/span&gt;.getProperties(), props, &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;);
          }
      
          &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; ScriptEngineManager engineManager = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ScriptEngineManager();
      
          &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; ScriptEngine instantiate(&lt;span class=&quot;predefined-type&quot;&gt;Set&lt;/span&gt; packages, &lt;span class=&quot;predefined-type&quot;&gt;PermissionCollection&lt;/span&gt; permissions) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; ScriptException {
      
              ScriptEngine eng = engineManager.getEngineByName(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
      
              &lt;span class=&quot;comment&quot;&gt;//XXX this might not work perfectly in jython&lt;/span&gt;
              &lt;span class=&quot;comment&quot;&gt;//but we can't make it work perfectly either, so let's just&lt;/span&gt;
              &lt;span class=&quot;comment&quot;&gt;//keep our fingers crossed..&lt;/span&gt;
              &lt;span class=&quot;comment&quot;&gt;//http://www.jython.org/jythonbook/en/1.0/ModulesPackages.html#from-import-statements&lt;/span&gt;
              &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; pkg : packages) {
                  &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
                      eng.eval(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;from &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; + pkg + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; import *&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
                  } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (ScriptException e) {
                      &lt;span class=&quot;comment&quot;&gt;//well, let's just keep things going, this is not fatal...&lt;/span&gt;
                      LOG.info(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Python script engine could not pre-import members of package '&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; + pkg + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;'.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
                  }
              }
      
              &lt;span class=&quot;comment&quot;&gt;//fingers crossed we can secure jython like this&lt;/span&gt;
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; permissions == &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt; ? eng : &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SandboxedScriptEngine(eng, permissions);
          }
      
          &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; installScriptSourceProvider(ScriptEngine scriptEngine, ScriptSourceProvider provider) {
              PySystemState sys = Py.getSystemState();
              &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sys != &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;) {
                  sys.path_hooks.append(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PythonSourceProvider(provider));
              }
          }
      
          &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Set&lt;/span&gt; generateIndirectionMethods(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; boundObjectName, &lt;span class=&quot;predefined-type&quot;&gt;Set&lt;/span&gt; overloadedMethods) {
              &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (overloadedMethods == &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt; || overloadedMethods.isEmpty()) {
                  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Collections&lt;/span&gt;.emptySet();
              }
      
              &lt;span class=&quot;predefined-type&quot;&gt;Set&lt;/span&gt; argCnts = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;HashSet&lt;/span&gt;();
              &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;predefined-type&quot;&gt;Method&lt;/span&gt; m : overloadedMethods) {
                  argCnts.add(m.getParameterTypes().length);
              }
      
              &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; methodName = overloadedMethods.iterator().next().getName();
              &lt;span class=&quot;predefined-type&quot;&gt;StringBuilder&lt;/span&gt; functionBody = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;StringBuilder&lt;/span&gt;();
      
              functionBody.append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;).append(methodName).append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;(*args, **kwargs):&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
              functionBody.append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;).append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;if len(kwargs) &amp;gt; 0:&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
              functionBody.append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;).append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;raise ValueError(&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Named arguments not supported for Java methods&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
              functionBody.append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;).append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;argCnt = len(args)&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
      
              &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;predefined-type&quot;&gt;Integer&lt;/span&gt; argCnt : argCnts) {
                  functionBody.append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;).append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;if argCnt == &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;).append(argCnt).append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
                  functionBody.append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;return &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;).append(boundObjectName).append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;).append(methodName).append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
                  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; last = argCnt - &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;;
                  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;; i &amp;lt; argCnt; ++i) {
                      functionBody.append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;args[&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;).append(i).append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
                      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i &amp;lt; last) {
                          functionBody.append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
                      }
                  }
                  functionBody.append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
              }
      
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Collections&lt;/span&gt;.singleton(functionBody.toString());
          }
      
          &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; extractUserFriendlyErrorMessage(ScriptException e) {
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; e.getMessage();
          }
      }&lt;/pre&gt;&lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The most important task of the initializer is to instantiate the script
      engine of the language it supports and intialize it - pre-import java
      packages of RHQ’s classes and apply java security to the script engine.
      The other tasks it has are to install a &quot;script source provider&quot; to the
      engine (the script source provider is a class that is able to locate a
      script &quot;somewhere&quot;), to extract a user-friendly error message from the
      script exception and finally to generate &quot;indirection methods&quot; -
      basically define top level functions that delegate to a method on
      certain object. All these methods are there so that RHQ can correctly
      set up the bindings that the scripts then can use to access and
      manipulate RHQ data.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I won’t be listing the source of the class that integrates the source
      providers with Python, you can take a look at it
      &lt;a href=&quot;http://git.fedorahosted.org/git/?p=rhq/rhq.git;a=blob;f=modules/enterprise/scripting/python/src/main/java/org/rhq/scripting/python/PythonSourceProvider.java;hb=HEAD&quot;&gt;here&lt;/a&gt;.
      But I’ll show you how it is possible in your local CLI session to import
      a python script stored in the RHQ server in some repository:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;python&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
        &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
      2
      3
      4
      5
      6
      7&lt;/pre&gt;&lt;/td&gt;
        &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;sys&lt;/span&gt;
      
      sys.path.append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;__rhq__:rhq://repositories/my_repo/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
      
      &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;my_script&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; foo
      
      ...&lt;/pre&gt;&lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;RHQ has a &lt;code&gt;path_hook&lt;/code&gt; in Python that looks for paths prefixed with
      &lt;code&gt;&lt;em&gt;rhq&lt;/em&gt;:&lt;/code&gt;. After that you can specify the root URL that the RHQ’s
      source provider understand. The import statement then looks for a module
      under that URL. In the example above, you will import the script called
      &lt;code&gt;my_script.py&lt;/code&gt; that is stored on the RHQ server in the repository called
      &lt;code&gt;my_repo&lt;/code&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So that’s it. You can see that adding support for another scripting
      language is not that hard. What language will you add? ;-) You can read
      more about the language support on the
      &lt;a href=&quot;https://docs.jboss.org/author/display/RHQ/Multiple+languages+in+CLI&quot;&gt;RHQ
      wiki&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://lukas.krejci.pw/posts/2012/03/09/rhq-meets-arquillian/</id>
    <title>RHQ meets Arquillian</title>
    <updated>2014-11-24T23:25:00+01:00</updated>
    <published>2012-03-09T00:00:00+00:00</published>
    <link href="http://lukas.krejci.pw/posts/2012/03/09/rhq-meets-arquillian/" rel="alternate" type="text/html" />
    <category term="java"></category>
    <category term="rhq"></category>
    <category term="arquillian"></category>
    <category term="testing"></category>
    <summary>
      
      Historically, RHQ has had a little bit of a problem with test coverage
      of its various (agent) plugins. There is a multitude of problems with
      testing these but the following two are, IMHO, the main ones:
      
      
      Managed Resources
      
      You somehow need to have the managed resource available for the plugin
      to connect to (i.e. you need to have the JBoss AS, Postgres or whatever
      your plugin manages). This is always a problem for a clean quick unit
      test. You either somehow need to mock the managed resource (try that
      with Postgres) or you need to have a way of configuring your test to get
      at or start the managed...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Historically, RHQ has had a little bit of a problem with test coverage
      of its various (agent) plugins. There is a multitude of problems with
      testing these but the following two are, IMHO, the main ones:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;managed-resources&quot;&gt;
      &lt;a class=&quot;anchor&quot; href=&quot;#managed-resources&quot;&gt;&lt;/a&gt;Managed Resources&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You somehow need to have the managed resource available for the plugin
      to connect to (i.e. you need to have the JBoss AS, Postgres or whatever
      your plugin manages). This is always a problem for a clean quick unit
      test. You either somehow need to mock the managed resource (try that
      with Postgres) or you need to have a way of configuring your test to get
      at or start the managed resource. This is where Arquillian certainly can
      come to the rescue with its ability to manage the lifecycle of its
      &quot;containers&quot; (for managed resources that have an Arquillian extension,
      like JBoss AS) but generally this needs to be in the &quot;hands&quot; of the
      tests for each plugin. There are a million ways the plugins talk to
      their managed resources and so trying to come up with a generic solution
      to start, stop and configure them would IMHO create more problems than
      it would solve.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;setting-up-agent-environment&quot;&gt;
      &lt;a class=&quot;anchor&quot; href=&quot;#setting-up-agent-environment&quot;&gt;&lt;/a&gt;Setting up Agent Environment&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;While not even too hard, running your test in RHQ’s plugin container
      requires a little bit of setup. It is important to realize that if you
      want your tests to be run inside a real plugin container (i.e. &quot;almost
      an RHQ agent&quot;), it is not enough to have your dependencies on your test
      classpath. The thing is that the plugin container is a container of its
      own - it has its own deployment requirements and classloading policies.
      It is best to think about deploying a plugin into RHQ agent as deploying
      a webapp into Tomcat - you wouldn’t expect to be able to test the webapp
      in Tomcat just by virtue of having them both on the classpath and
      starting Tomcat.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So to put it straight, you need to jump through some maven and antrun
      hoops to package your plugin (and any other plugin it depends on) and
      put them in defined locations, where the plugin container can then pick
      them from. Also, if you want to take advantage of our native APIs to
      obtain running processes, etc., you need to use another bucket of
      &lt;code&gt;antrun&lt;/code&gt; incantations in your POM to set that up.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;previous-attempts&quot;&gt;
      &lt;a class=&quot;anchor&quot; href=&quot;#previous-attempts&quot;&gt;&lt;/a&gt;Previous Attempts&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The two problems outlined above caused that the test coverage of our
      plugins is rather low. We always knew this sucked and there have been
      attempts to change that.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A &lt;code&gt;ComponentTest&lt;/code&gt; class used in some of our plugins is an attempt at
      testing the plugins out-of-container, bootstrapping them with some
      required input. Advantage of this approach is that you don’t need to
      care about the plugin container and its intricacies, disadvantage being
      that you don’t get to test your plugin in an environment it will be
      deployed to. Also, you need to implement support for bootstrapping the
      parameters for any plugin facet your plugin implements - in the end
      you’d end up reimplementing large parts of the plugin container just for
      the testing needs.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Another attempt was the &lt;code&gt;@PluginContainerSetup&lt;/code&gt; annotation that took
      care of the configuration and lifecycle of the plugin container. The
      advantage was that you got access to a real plugin container running
      with your plugins, disadvantage being that you still were required to
      perform some maven and antrun artistry so that the plugin container
      could find all the plugins and libraries you’d need.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;enter-arquillian&quot;&gt;
      &lt;a class=&quot;anchor&quot; href=&quot;#enter-arquillian&quot;&gt;&lt;/a&gt;Enter Arquillian&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As I already hinted at above, the RHQ agent shares a lot of similarities
      with EE/Servlet containers from the deployment point of view. Arquillian
      was therefore an obvious choice to try and solve our plugin test
      problems once and for all (well, this is a lie - the problem with having
      to have a managed resource available for the test is a problem that
      cannot be reasonably solved using a single solution).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So what is this integration about? It certainly won’t help you, as the
      plugin developer, with connecting to a managed resource you’re creating
      your plugin for. But it &lt;strong&gt;does&lt;/strong&gt; bring you a lot of convenience over the
      previous state of things if you want to test your plugin in container.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Most importantly there is no more any maven and/or antrun required to
      test your plugin in-container. You just define your plugin in the
      Arquillian way using the &lt;code&gt;@Deployment&lt;/code&gt; annotation (and you can &quot;attach&quot;
      to it any another plugins it depends on by instructing Arquillian to use
      the maven resolver). Using &lt;code&gt;arquillian.xml&lt;/code&gt; (yes, a configuration file
      but an order of magnitude shorter and much more focused and simple than
      &lt;code&gt;pom.xml&lt;/code&gt;), you can configure your container to use RHQ’s native APIs by
      flipping one config property to true. You can declaratively say you want
      to run discovery of managed resources (using, surprise, a
      &lt;code&gt;@RunDiscovery&lt;/code&gt; annotation) and you get get results of such discovery
      injected into a field in your test class. You can even set the container
      up so that it thinks it is connected to an RHQ server and you can
      provide your &lt;code&gt;ServerServices&lt;/code&gt; implementation (i.e. the RHQ server facade
      interface) and there is a default implementation ready that uses Mockito
      to mock your serverside. There’s still more, you can read all about the
      supported features and see some examples on
      &lt;a href=&quot;http://wiki.rhq-project.org/display/RHQ/Arquillian+Integration+For+Agent+Plugins&quot;&gt;this
      wiki page&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;conclusion&quot;&gt;
      &lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;While not a panacea for all problems the testing of RHQ plugins brings
      about, using Arquillian we were able to cut the setup needed to run a
      plugin in-container by 90% and we were able to introduce a number of
      convenience annotations using which you can get a variety of data
      injected into your unit tests. This is still just a beginning though,
      the next step is to start actually using this integration and come up
      with other useful annotation and/or helper methods/classes that will
      ease the working with and retrieving information from the plugin
      container as much as possible.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://lukas.krejci.pw/posts/2012/02/06/securing-rhino-in-java6/</id>
    <title>Securing Rhino in Java6</title>
    <updated>2014-11-24T23:25:00+01:00</updated>
    <published>2012-02-06T00:00:00+00:00</published>
    <link href="http://lukas.krejci.pw/posts/2012/02/06/securing-rhino-in-java6/" rel="alternate" type="text/html" />
    <category term="java"></category>
    <category term="rhq"></category>
    <category term="rhino"></category>
    <category term="scripting"></category>
    <summary>
      
      In RHQ we let the users provide scripts that can
      be run when an alert fires. This is great for automation because the
      script can do anything the users can do with our remote API. But the
      users of course can write a script like this:
      
      
      
      
        1
      
        java.lang.System.exit(1);
      
      
      
      
      This would shut down the whole RHQ server, which, of course, is not so
      nice.
      
      
      The solution to this problem is to run the Rhino script engine in a
      custom access control context. One has to define the set of Java
      permissions that the scripts are allowed and specifically NOT include
      the "exitVM" RuntimePermission in the set. After that...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In &lt;a href=&quot;http://rhq-project.org&quot;&gt;RHQ&lt;/a&gt; we let the users provide scripts that can
      be run when an alert fires. This is great for automation because the
      script can do anything the users can do with our remote API. But the
      users of course can write a script like this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
        &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/td&gt;
        &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;java.lang.System.exit(&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;);&lt;/pre&gt;&lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This would shut down the whole RHQ server, which, of course, is not so
      nice.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The solution to this problem is to run the Rhino script engine in a
      custom access control context. One has to define the set of Java
      permissions that the scripts are allowed and specifically &lt;strong&gt;NOT&lt;/strong&gt; include
      the &quot;exitVM&quot; RuntimePermission in the set. After that a custom
      &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/security/AccessControlContext.html&quot;&gt;&lt;code&gt;AccessControlContext&lt;/code&gt;&lt;/a&gt;
      can be created with the set of permissions.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;But now comes the fun part. In Java6 update 28, the Rhino script engine
      actually &lt;strong&gt;changed&lt;/strong&gt; the way it can be secured due to a found security
      vulnerability. So in a Java6 update 27 patched with
      &lt;a href=&quot;http://www.oracle.com/technetwork/topics/security/javacpuoct2011-443431.html&quot;&gt;this&lt;/a&gt;
      patch or in Java6 update 28 and later, the Rhino runs the scripts with
      the access control context that it was created with itself. In the
      unpatched Java6 u27 and earlier the scripts were run with an access
      control context active at the time when the script evaluated.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So what does that mean for you, my dear readers, that want to reliably
      secure your application and allow custom scripts to be executed in it at
      the same time? Well, of course, you need to secure your script engine
      twice (or refuse to run on anything older than Java6 u28).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Let me show you how it is done in RHQ:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
        &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
      2
      3
      4
      5
      6
      7
      8
      9
      &lt;strong&gt;10&lt;/strong&gt;
      11
      12
      13
      14&lt;/pre&gt;&lt;/td&gt;
        &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;predefined-type&quot;&gt;ProtectionDomain&lt;/span&gt; scriptDomain = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;ProtectionDomain&lt;/span&gt;(src, permissions);
      &lt;span class=&quot;predefined-type&quot;&gt;AccessControlContext&lt;/span&gt; ctx = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;AccessControlContext&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;ProtectionDomain&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;[]&lt;/span&gt; { scriptDomain });
      &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;AccessController&lt;/span&gt;.doPrivileged(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;PrivilegedExceptionAction&lt;/span&gt;&amp;lt;ScriptEngine&amp;gt;() {
              &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
              &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; ScriptEngine run() &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;Exception&lt;/span&gt; {
                  ScriptEngineManager engineManager = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ScriptEngineManager();
                  ScriptEngine engine = engineManager.getEngineByName(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;JavaScript&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
                  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SandboxedScriptEngine(engine, permissions);
              }
          }, ctx);
      } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;exception&quot;&gt;PrivilegedActionException&lt;/span&gt; e) {
          ...
      }&lt;/pre&gt;&lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;What do you actually see in the code above? The privileged block is
      there to ensure that the script engine is created using the desired
      access control context (so that it can use it in Java6 u28). The script
      engine itself (created by the call to &lt;code&gt;getEngineByName&lt;/code&gt;) is then wrapped
      in a
      &lt;a href=&quot;http://git.fedorahosted.org/git/?p=rhq/rhq.git;a=blob;f=modules/enterprise/binding/src/main/java/org/rhq/bindings/SandboxedScriptEngine.java;hb=HEAD&quot;&gt;&lt;code&gt;SandboxedScriptEngine&lt;/code&gt;&lt;/a&gt;
      which is a special decorator that wraps all the &lt;code&gt;eval()&lt;/code&gt; invocations in
      a access control context with the specified permissions. That will
      ensure that the access control context is enforced in the unpatched
      Java6 u27 and earlier.&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://lukas.krejci.pw/posts/2012/02/06/rhq-cli-over-xmpp/</id>
    <title>RHQ CLI over XMPP</title>
    <updated>2014-11-24T23:25:00+01:00</updated>
    <published>2012-02-06T00:00:00+00:00</published>
    <link href="http://lukas.krejci.pw/posts/2012/02/06/rhq-cli-over-xmpp/" rel="alternate" type="text/html" />
    <category term="java"></category>
    <category term="rhq"></category>
    <category term="xmpp"></category>
    <category term="scripting"></category>
    <summary>
      
      I watched the great demo of the XMPP server
      plugin for RHQ from Rafael Chies. Rafael is using a custom DSL to query
      the RHQ server for information but I thought that that really shouldn&#8217;t
      be necessary - it should be possible to use an ordinary CLI session
      behind this. Granted - the "query language" of our remote API is more
      complicated than the simple DSL Rafael is using but at the same time,
      the API we use in the CLI is much more feature rich and I wouldn&#8217;t have
      to reimplement any of it if I was able to "blend" the CLI session with
      the XMPP chat.
      
      
      So...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I watched the great demo of the &lt;a href=&quot;http://vimeo.com/35730049&quot;&gt;XMPP server
      plugin&lt;/a&gt; for RHQ from Rafael Chies. Rafael is using a custom DSL to query
      the RHQ server for information but I thought that that really shouldn’t
      be necessary - it should be possible to use an ordinary CLI session
      behind this. Granted - the &quot;query language&quot; of our remote API is more
      complicated than the simple DSL Rafael is using but at the same time,
      the API we use in the CLI is much more feature rich and I wouldn’t have
      to reimplement any of it if I was able to &quot;blend&quot; the CLI session with
      the XMPP chat.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So I forked Rafale’s code on &lt;a href=&quot;https://github.com/metlos/rhq-xmpp&quot;&gt;github&lt;/a&gt;
      and went off to work. During the course of reimplementing Rafael’s code
      I discovered 2 bugs in RHQ itself
      (&lt;a href=&quot;https://bugzilla.redhat.com/show_bug.cgi?id=786106&quot;&gt;BZ 786106&lt;/a&gt; and
      &lt;a href=&quot;https://bugzilla.redhat.com/show_bug.cgi?id=786194&quot;&gt;BZ 786194&lt;/a&gt;) which I
      fixed immediately (well, it took me a couple of hours to figure out what
      the hell was going on there ;) ). After that, it wasn’t really that hard
      to integrate XMPP and the CLI’s script engine and here’s a short video
      to prove that it actually works :-) :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://vimeo.com/36274198&quot;&gt;RHQ CLI over XMPP&lt;/a&gt; on &lt;a href=&quot;http://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For the interested, all the important code is included in
      &lt;a href=&quot;https://github.com/metlos/rhq-xmpp/blob/master/src/main/java/org/rhq/enterprise/server/plugins/xmpp/receiver/XMPPReceiver.java&quot;&gt;this
      class&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://lukas.krejci.pw/posts/2012/01/13/git-merging-after-a-revert/</id>
    <title>Git - merging after a revert</title>
    <updated>2014-11-24T23:25:00+01:00</updated>
    <published>2012-01-13T00:00:00+00:00</published>
    <link href="http://lukas.krejci.pw/posts/2012/01/13/git-merging-after-a-revert/" rel="alternate" type="text/html" />
    <category term="git"></category>
    <summary>
      
      As it happened, I managed to merge a feature branch into our mainline
      that was not completely finished. After trying to fix it directly in the
      mainline I figured out that the best thing to do is to revert my changes
      in master and continue in a feature branch.
      
      
      Time has come to merge again.
      
      
      I tried the usual:
      
      
      
      $ git checkout master
      $ git merge my-feature-branch
      
      
      
      This of course resulted in a great number of conflicts and some files
      from the feature branch completely missing in the mainline because git
      saw the files deleted by my revert commit in the mainline, while they
      weren&#8217;t touched in the feature branch. Git...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As it happened, I managed to merge a feature branch into our mainline
      that was not completely finished. After trying to fix it directly in the
      mainline I figured out that the best thing to do is to revert my changes
      in master and continue in a feature branch.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Time has come to merge again.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I tried the usual:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;$ git checkout master
      $ git merge my-feature-branch&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This of course resulted in a great number of conflicts and some files
      from the feature branch completely missing in the mainline because git
      saw the files deleted by my revert commit in the mainline, while they
      weren’t touched in the feature branch. Git therefore quite reasonably
      assumed that, as the deletes in mainline were newer than the version in
      feature, keeping them deleted is the right thing to do. Other conflicts
      were caused by files having been deleted in the mainline but changed in
      the feature branch. Git doesn’t know what to do with these (I wouldn’t
      either if I were it ;) ).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So that didn’t go too well I thought. Feeling defeated I had to:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;$ git merge --abort&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;After a bit of googling, the answer seemed to be &quot;revert the revert and
      then merge&quot;. And yes, it worked! :)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;$git revert &amp;lt;my-revert-commit-hash&amp;gt;
      $git merge my-feature-branch&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;By reverting the revert I effectively put the mainline into a state
      where it contained the files from the feature branch in a form that also
      exists on the feature branch (the commit hashes of course don’t match
      but the 3-way merge has a much better starting point than with the files
      altogether missing). After that, the merge could figure out the changes
      I made in the feature branch and update the affected files. I was even
      lucky enough to get no conflicts - even though theoretically the
      conflicts could have occured both during the revert and during the
      merge.&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://lukas.krejci.pw/posts/2011/10/10/using-byteman-to-detect-native-memory-leaks/</id>
    <title>Using Byteman to detect native memory leaks</title>
    <updated>2014-11-24T23:25:00+01:00</updated>
    <published>2011-10-10T00:00:00+00:00</published>
    <link href="http://lukas.krejci.pw/posts/2011/10/10/using-byteman-to-detect-native-memory-leaks/" rel="alternate" type="text/html" />
    <category term="java"></category>
    <category term="rhq"></category>
    <category term="byteman"></category>
    <summary>
      
      In RHQ we use the Augeas
      library to do the configuration file parsing and updates for us in some
      of the plugins. Augeas in itself is pretty cool and the language for
      describing the structure of arbitrary configuration files and howto
      update them is pretty powerful. The only downside to using Augeas is
      that it is a C library and we therefore have to bind with it and use it
      more carefully so that we don&#8217;t leak its native resources that aren&#8217;t
      under control of JVM&#8217;s garbage collector.
      
      
      It all boils down to just calling the close() method on the Augeas
      instance whenever we&#8217;re done with it.
      
      
      As simple as...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In &lt;a href=&quot;http://rhq-project.org&quot;&gt;RHQ&lt;/a&gt; we use the &lt;a href=&quot;http://augeas.net&quot;&gt;Augeas&lt;/a&gt;
      library to do the configuration file parsing and updates for us in some
      of the plugins. Augeas in itself is pretty cool and the language for
      describing the structure of arbitrary configuration files and howto
      update them is pretty powerful. The only downside to using Augeas is
      that it is a C library and we therefore have to bind with it and use it
      more carefully so that we don’t leak its native resources that aren’t
      under control of JVM’s garbage collector.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;It all boils down to just calling the &lt;code&gt;close()&lt;/code&gt; method on the Augeas
      instance whenever we’re done with it.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As simple as it may seem, we still managed to mess it up and found out
      that there were some memory leaks that caused the RHQ agent to slowly
      (or not so slowly depending on its configuration) grow its memory usage
      which JVM’s maximum heap size couldn’t guard.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The source code of the apache plugin isn’t the simplest and there are
      many places that invoke augeas which interact in various ways so
      debugging this all isn’t the simplest task. Even harder, we thought,
      would be to come up with some unit tests that would make sure that we
      don’t leak augeas references.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;But then a crazy idea entered my mind. I knew
      &lt;a href=&quot;http://www.jboss.org/byteman&quot;&gt;Byteman&lt;/a&gt; was a tool for bytecode
      manipulation. My idea was to somehow use it in our tests to do reference
      counting (by instrumenting the Augeas &lt;code&gt;init()&lt;/code&gt; and &lt;code&gt;close()&lt;/code&gt; calls).
      Turns out it is &lt;strong&gt;very&lt;/strong&gt; easy to do that with Byteman and I was able to
      achieve even more than I hoped for.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Byteman integrates quite nicely with TestNG that we use for our unit
      tests and so in a couple of steps I was able to implement a reference
      counter that not only was able to give me a difference between number of
      augeas instances creates vs. closed &lt;strong&gt;BUT&lt;/strong&gt; it would also give me the
      stacktraces to the code that created a reference that wasn’t `close()’d
      afterwards. That I think is absolutely cool.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The rules I added to my tests are quite simple:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
        &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
      2
      3
      4
      5
      6
      7
      8
      9&lt;/pre&gt;&lt;/td&gt;
        &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;annotation&quot;&gt;@BMRules&lt;/span&gt;(
          rules = {
              &lt;span class=&quot;annotation&quot;&gt;@BMRule&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;increment reference count on Augeas init&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, targetClass = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;net.augeas.Augeas&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
                  targetMethod = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;(String, String, int)&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
                  helper = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;org.rhq.plugins.apache.augeas.CreateAndCloseTracker&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
                  action = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;recordCreate($0, formatStack())&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;),
              &lt;span class=&quot;annotation&quot;&gt;@BMRule&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;decrement reference count on Augeas close&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, targetClass = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;net.augeas.Augeas&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
                  targetMethod = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;close()&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, helper = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;org.rhq.plugins.apache.augeas.CreateAndCloseTracker&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
                  action = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;recordClose($0, formatStack())&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) })&lt;/pre&gt;&lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There indeed is nothing special about them. I tell Byteman to call my
      helper class’s &lt;code&gt;recordCreate()&lt;/code&gt; method whenever Augeas &lt;code&gt;init()&lt;/code&gt; is
      called and to pass in the augeas instance (&lt;code&gt;$0&lt;/code&gt; stands for &lt;code&gt;this&lt;/code&gt; in the
      context of the instrumented method) and a nice callstack. The second
      rule merely calls &lt;code&gt;recordClose&lt;/code&gt; on my helper with the instance of augeas
      that is being closed and again the callstack.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can check out the code for my helper class
      &lt;a href=&quot;http://git.fedorahosted.org/git/?p=rhq/rhq.git;a=blob;f=modules/integration-tests/apache-plugin-test/src/test/java/org/rhq/plugins/apache/augeas/CreateAndCloseTracker.java;hb=HEAD&quot;&gt;here&lt;/a&gt;.
      As you might have guessed, it’s only a little more than a hashmap where
      the keys are the augeas instances and values are the callstacks. By
      processing this map after all the tests are run, I can quite easily
      figure out if &lt;strong&gt;and where&lt;/strong&gt; we leak native memory.&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://lukas.krejci.pw/posts/2011/08/04/making-testng-listeners-apply-to-only-certain-classes/</id>
    <title>Making TestNG @Listeners apply to only certain classes</title>
    <updated>2014-11-24T23:25:00+01:00</updated>
    <published>2011-08-04T00:00:00+00:00</published>
    <link href="http://lukas.krejci.pw/posts/2011/08/04/making-testng-listeners-apply-to-only-certain-classes/" rel="alternate" type="text/html" />
    <category term="java"></category>
    <category term="testng"></category>
    <summary>
      
      TestNG defines a @Listeners annotation that is
      analogous to the listeners element in the test suite configuration xml
      file. This annotation can be put on any class but is not applied only to
      that class, but uniformly on all the tests in the test suite (which is
      in line with the purpose of the original XML element but it certainly is
      confusing to see an annotation on a class that has much wider influence
      but that single class).
      
      
      On the other hand, I really like what the @Listeners annotation
      offers. It is a way to "favor composition over inheritance" - a famous
      recommendation of the GoF. It would be...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://testng.org&quot;&gt;TestNG&lt;/a&gt; defines a &lt;code&gt;@Listeners&lt;/code&gt; annotation that is
      analogous to the &lt;code&gt;listeners&lt;/code&gt; element in the test suite configuration xml
      file. This annotation can be put on any class but is not applied only to
      that class, but uniformly on &lt;strong&gt;all&lt;/strong&gt; the tests in the test suite (which is
      in line with the purpose of the original XML element but it certainly is
      confusing to see an annotation on a class that has much wider influence
      but that single class).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;On the other hand, I really like what the &lt;code&gt;@Listeners&lt;/code&gt; annotation
      offers. It is a way to &quot;favor composition over inheritance&quot; - a famous
      recommendation of the GoF. It would be great, if there was a way of
      using the &lt;code&gt;@Listeners&lt;/code&gt; annotation to specify &quot;augmentations&quot; of the
      tests in that precise test class so that I can implement the listeners
      in separation and I don’t have to compose awkward class hierarchies to
      get the behaviour I want in my test class.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Imagine a world where one could write a test like this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
        &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
      2
      3
      4
      5
      6
      7
      8
      9
      &lt;strong&gt;10&lt;/strong&gt;
      11
      12
      13
      14
      15
      16
      17
      18
      19
      &lt;strong&gt;20&lt;/strong&gt;
      21
      22
      23
      24
      25
      26
      27
      28
      29
      &lt;strong&gt;30&lt;/strong&gt;&lt;/pre&gt;&lt;/td&gt;
        &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;annotation&quot;&gt;@ClassListeners&lt;/span&gt;(JMockTest.class, BytemanTest.class,
          RHQPluginContainerTest.class, DatabaseTest.class)
      &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;MyTests&lt;/span&gt; {
      
           &lt;span class=&quot;annotation&quot;&gt;@Test&lt;/span&gt;
           &lt;span class=&quot;annotation&quot;&gt;@BMRule&lt;/span&gt;(... my byteman rule definition ...)
           &lt;span class=&quot;annotation&quot;&gt;@PluginContainerSetup&lt;/span&gt;(... RHQ plugin container setup ...)
           &lt;span class=&quot;annotation&quot;&gt;@DatabaseState&lt;/span&gt;(url = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;my-db-dump.xml.zip&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, dbVersion = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;2.100&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
           &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; test() {
               Mockery context = TestNG.getClassListenerAccess(JMockTest.class);
               RHQPluginContainerAccess pc = TestNG.getClassListenerAccess(RHQPluginContainerTest.class);
               PluginContainerConfiguration config = pc.createMockedConfiguration(context);
      
               context.checking( ... my expectations ... );
      
               &lt;span class=&quot;predefined-type&quot;&gt;Connection&lt;/span&gt; dbConnection = TestNG.getClassListenerAccess(DatabaseTest.class)
                   .getJdbcConnection();
      
               ... my test on the RHQ plugin container modified using the byteman rules ...
           }
      }
      
      &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;annotation&quot;&gt;@interface&lt;/span&gt; ClassListeners {
          &lt;span class=&quot;predefined-type&quot;&gt;Class&lt;/span&gt;&amp;lt;? &lt;span class=&quot;directive&quot;&gt;extends&lt;/span&gt; IClassListener&amp;lt;?&amp;gt;&amp;gt;&lt;span class=&quot;type&quot;&gt;[]&lt;/span&gt; value();
      }
      
      &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;IClassListener&lt;/span&gt;&amp;lt;T&amp;gt; &lt;span class=&quot;directive&quot;&gt;extends&lt;/span&gt; ITestNGListener {
      
            T getAccessObject(IInvokedMethod testMethod);
      }&lt;/pre&gt;&lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To get near that ideal state with the current TestNG (well, we’re using
      5.13 in RHQ but as far as I checked there is nothing new in that regard
      in the latest TestNG) I had to do the following:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;Restrict my listeners to only apply themselves if they are defined
      as a listener on the class of the current test method (i.e. basically
      break the contract of the annotation as it is right now).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Make the data that is available in the above example through the
      &quot;access&quot; objects accessible statically from a thread local storage. This
      is so that the test methodcan get to the data that is defined by the
      listener without having a reference to it.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Here is a short synthetic example of how I did it:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
        &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
      2
      3
      4
      5
      6
      7
      8
      9
      &lt;strong&gt;10&lt;/strong&gt;
      11
      12
      13
      14
      15
      16
      17
      18
      19
      &lt;strong&gt;20&lt;/strong&gt;
      21
      22
      23
      24
      25
      26
      27
      28
      29
      &lt;strong&gt;30&lt;/strong&gt;
      31
      32
      33
      34
      35
      36
      37
      38
      39
      &lt;strong&gt;40&lt;/strong&gt;
      41
      42
      43
      44
      45
      46
      47
      48
      49
      &lt;strong&gt;50&lt;/strong&gt;
      51
      52
      53
      54
      55
      56&lt;/pre&gt;&lt;/td&gt;
        &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;
      &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;MyListener&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;implements&lt;/span&gt; IInvokedMethodListener {
          &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;ThreadLocal&lt;/span&gt;&amp;lt;AccessObject&amp;gt; ACCESS = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;ThreadLocal&lt;/span&gt;&amp;lt;AccessObject&amp;gt;();
      
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;static&lt;/span&gt; AccessObject getAccess() {
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ACCESS.get();
          }
      
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; beforeInvocation(IInvokedMethod method, ITestResult testResult) {
              &lt;span class=&quot;comment&quot;&gt;//checking that the test actually wants the augmentation I provide&lt;/span&gt;
              &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!isListenerOnTestClass(method)) {
                  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;
              }
              ... do some setup stuff ...
      
              &lt;span class=&quot;comment&quot;&gt;//setup the access object so that the test can get to the data I defined.&lt;/span&gt;
              ACCESS.set(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AccessObject());
          }
      
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; afterInvocation(IInvokedMethod method, ITestResult testResult) {
              &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!isListenerOnTestClass(method)) {
                  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;
              }
              ... tear down ...
              ACCESS.set(&lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;);
          }
      
          &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; isListenerOnTestClass(IInvokedMethod method) {
              &lt;span class=&quot;predefined-type&quot;&gt;Class&lt;/span&gt; cls = method.getTestMethod().getTestClass().getRealClass();
      
              &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (cls != &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;) {
                  Listeners annotation = cls.getAnnotation(Listeners.class);
      
                  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (annotation != &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;) {
                      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;predefined-type&quot;&gt;Class&lt;/span&gt; listener : annotation.value()) {
                          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.getClass().equals(listener)) {
                              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;;
                          }
                      }
                  }
      
                  cls = cls.getSuperclass();
              }
      
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;;
           }
      }
      
      &lt;span class=&quot;annotation&quot;&gt;@Listeners&lt;/span&gt;(MyListener.class)
      &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;MyTest&lt;/span&gt; {
      
           &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; test() {
               AccessObject obj = MyListener.getAccess();
               ... my test ...
           }
      }&lt;/pre&gt;&lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://lukas.krejci.pw/posts/2011/06/23/properties-referencing-each-other/</id>
    <title>Properties referencing each other</title>
    <updated>2014-11-24T23:25:00+01:00</updated>
    <published>2011-06-23T00:00:00+00:00</published>
    <link href="http://lukas.krejci.pw/posts/2011/06/23/properties-referencing-each-other/" rel="alternate" type="text/html" />
    <category term="java"></category>
    <summary>
      
      This must have been done before countless times but because I just
      couldn&#8217;t google anything useful (and to stay true to the name of this
      blog) I implemented it myself yet again.
      
      
      The problem is this. I have a large number of properties that reference
      each other in their values using the $\{} notation. E.g. the following
      property file:
      
      
      
      message=Hello ${name}!
      name=Frank
      
      
      
      My actual use case for this is that I have a large number of
      configuration options that can be passed to a java program as system
      properties (i.e. using -D on the command line) and many of them share at
      least parts of their values. I therefore wanted to...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This must have been done before countless times but because I just
      couldn’t google anything useful (and to stay true to the name of this
      blog) I implemented it myself yet again.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The problem is this. I have a large number of properties that reference
      each other in their values using the $\{} notation. E.g. the following
      property file:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;message=Hello ${name}!
      name=Frank&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;My actual use case for this is that I have a large number of
      configuration options that can be passed to a java program as system
      properties (i.e. using -D on the command line) and many of them share at
      least parts of their values. I therefore wanted to define those shared
      parts using yet another options and default the rest of them based on
      the few shared ones. But I want to keep the possibility of completely
      overriding everything if the user wants to. E.g.:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;These would be specified on the command line:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;port=111
      host=localhost&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;And the rest would be defaulted to the values based on the values above:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;service1=${host}:${port}/service1
      service2=${host}:${port}/service2&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;But that’s not all. Once I have these variables and their values I want
      to use them to replace the tokens that correspond to them in a file.
      E.g.:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;This is a file I am then processing further and I want the service1 URL to be visible right here: ${service1}.&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Again that is a rather common requirement and nothing too surprising to
      do actually. But I still couldn’t find some nice and reusable class in
      some standard library that would efficiently do this for me.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Then I stumbled upon the
      &lt;a href=&quot;http://tutorials.jenkov.com/java-howto/replace-strings-in-streams-arrays-files.html&quot;&gt;TokenReplacingReader&lt;/a&gt;
      and thought to myself that that’s exactly the thing I need to solve
      &lt;strong&gt;both&lt;/strong&gt; of my problems (after I fixed it slightly, see below).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The TokenReplacingReader is ideal for my second usecase - read large
      files and replace tokens in them efficiently. But how do you say does it
      solve my first problem?. Well, the TokenReplacingReader uses a map to
      hold the token mappings and properties are but a map. So if you use the
      reader to &quot;render&quot; the value of a property, you can setup the reader to
      use the properties themselves as the token mappings. Can you see the
      beautiful recursion in there? ;)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Ok, so here’s the code that I came up with:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
        &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
      2
      3
      4
      5
      6
      7
      8
      9
      &lt;strong&gt;10&lt;/strong&gt;
      11
      12
      13
      14
      15
      16
      17
      18
      19
      &lt;strong&gt;20&lt;/strong&gt;
      21
      22
      23
      24
      25
      26
      27
      28
      29
      &lt;strong&gt;30&lt;/strong&gt;
      31
      32
      33
      34
      35
      36
      37
      38
      39
      &lt;strong&gt;40&lt;/strong&gt;
      41
      42
      43
      44
      45
      46
      47
      48
      49
      &lt;strong&gt;50&lt;/strong&gt;
      51
      52
      53
      54
      55
      56
      57
      58
      59
      &lt;strong&gt;60&lt;/strong&gt;
      61
      62
      63
      64
      65
      66
      67
      68
      69
      &lt;strong&gt;70&lt;/strong&gt;
      71
      72
      73
      74
      75
      76
      77
      78
      79
      &lt;strong&gt;80&lt;/strong&gt;
      81
      82
      83
      84
      85
      86
      87
      88
      89
      &lt;strong&gt;90&lt;/strong&gt;
      91
      92
      93
      94
      95
      96
      97
      98
      99
      &lt;strong&gt;100&lt;/strong&gt;
      101
      102
      103
      104
      105
      106
      107
      108
      109
      &lt;strong&gt;110&lt;/strong&gt;
      111
      112
      113
      114
      115
      116
      117
      118
      119
      &lt;strong&gt;120&lt;/strong&gt;
      121
      122
      123
      124
      125
      126
      127
      128
      129
      &lt;strong&gt;130&lt;/strong&gt;
      131
      132
      133
      134
      135
      136
      137
      138
      139
      &lt;strong&gt;140&lt;/strong&gt;
      141
      142
      143
      144
      145
      146
      147
      148
      149
      &lt;strong&gt;150&lt;/strong&gt;
      151
      152
      153
      154
      155
      156
      157
      158
      159
      &lt;strong&gt;160&lt;/strong&gt;
      161
      162
      163
      164
      165
      166
      167
      168
      169
      &lt;strong&gt;170&lt;/strong&gt;
      171
      172
      173
      174
      175
      176
      177
      178
      179
      &lt;strong&gt;180&lt;/strong&gt;
      181
      182
      183
      184
      185
      186
      187
      188
      189
      &lt;strong&gt;190&lt;/strong&gt;
      191
      192
      193
      194
      195
      196
      197
      198
      199
      &lt;strong&gt;200&lt;/strong&gt;
      201
      202
      203
      204
      205
      206
      207
      208
      209
      &lt;strong&gt;210&lt;/strong&gt;
      211
      212
      213
      214
      215
      216
      217
      218
      219
      &lt;strong&gt;220&lt;/strong&gt;
      221
      222
      223
      224
      225
      226
      227
      228
      229
      &lt;strong&gt;230&lt;/strong&gt;
      231
      232
      233
      234
      235
      236
      237
      238
      239
      &lt;strong&gt;240&lt;/strong&gt;
      241
      242
      243
      244
      245
      246
      247
      248
      249
      &lt;strong&gt;250&lt;/strong&gt;
      251
      252
      253
      254
      255
      256
      257
      258
      259
      &lt;strong&gt;260&lt;/strong&gt;
      261
      262
      263
      264
      265
      266
      267
      268
      269
      &lt;strong&gt;270&lt;/strong&gt;
      271
      272
      273
      274
      275
      276
      277
      278&lt;/pre&gt;&lt;/td&gt;
        &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;comment&quot;&gt;/**
       * This map is basically an extension of the {@link Properties} class that can resolve the references
       * to values of other keys inside the values.
       * &amp;lt;p&amp;gt;
       * I.e., if the map is initialized with the following mappings:
       * &amp;lt;p&amp;gt;
       * &amp;lt;code&amp;gt;
       * name =&amp;gt; world &amp;lt;br /&amp;gt;
       * hello =&amp;gt; Hello ${name}!
       * &amp;lt;/code&amp;gt;
       * &amp;lt;p&amp;gt;
       * then the call to:
       * &amp;lt;p&amp;gt;
       * &amp;lt;code&amp;gt;
       * get(&quot;hello&quot;)
       * &amp;lt;/code&amp;gt;
       * &amp;lt;p&amp;gt;
       * will return:
       * &amp;lt;code&amp;gt;
       * &quot;Hello world!&quot;
       * &amp;lt;/code&amp;gt;
       * &amp;lt;p&amp;gt;
       * To access and modify the underlying unprocessed values, one can use the &quot;raw&quot; counterparts of the standard
       * map methods (e.g. instead of {@link #get(Object)}, use {@link #getRaw(Object)}, etc.).
       *
       * @author Lukas Krejci
       */&lt;/span&gt;
      &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;TokenReplacingProperties&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;HashMap&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; {
          &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; serialVersionUID = &lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;;
      
          &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; wrapped;
          &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; Deque&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; currentResolutionStack = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayDeque&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt;();
          &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; resolved = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;HashMap&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt;();
      
          &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;Entry&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt;.Entry&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; {
              &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt;.Entry&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; wrapped;
              &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; process;
      
              &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; Entry(&lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt;.Entry&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; wrapped, &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; process) {
                  &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.wrapped = wrapped;
                  &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.process = process;
              }
      
              &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
              &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; equals(&lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; obj) {
                  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (obj == &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;) {
                      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;;
                  }
      
                  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!(obj &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Entry)) {
                      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;;
                  }
      
                  Entry other = (Entry) obj;
      
                  &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; key = wrapped.getKey();
                  &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; otherKey = other.getKey();
                  &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; value = getValue();
                  &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; otherValue = other.getValue();
      
                  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (key == &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt; ? otherKey == &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt; : key.equals(otherKey)) &amp;amp;&amp;amp;
                         (value == &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt; ? otherValue == &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt; : value.equals(otherValue));
              }
      
              &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; getKey() {
                  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; wrapped.getKey();
              }
      
              &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; getValue() {
                  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (process) {
                      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; get(wrapped.getKey());
                  } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
                      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; wrapped.getValue();
                  }
              }
      
              &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
              &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; hashCode() {
                  &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; key = wrapped.getKey();
                  &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; value = getValue();
                  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (key == &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt; : key.hashCode()) ^
                  (value == &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt; : value.hashCode());
              }
      
              &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; setValue(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; value) {
                  resolved.remove(wrapped.getKey());
                  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; wrapped.setValue(value);
              }
      
              &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
              &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; toString() {
                  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; wrapped.toString();
              }
          }
      
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; TokenReplacingProperties(&lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; wrapped) {
              &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.wrapped = wrapped;
          }
      
          &lt;span class=&quot;annotation&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;unchecked&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; TokenReplacingProperties(&lt;span class=&quot;predefined-type&quot;&gt;Properties&lt;/span&gt; properties) {
              &lt;span class=&quot;comment&quot;&gt;//well, this is ugly, but per documentation of Properties,&lt;/span&gt;
              &lt;span class=&quot;comment&quot;&gt;//both keys and values are always strings, so we can afford&lt;/span&gt;
              &lt;span class=&quot;comment&quot;&gt;//this little hack.&lt;/span&gt;
              &lt;span class=&quot;annotation&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;rawtypes&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
              &lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt; map = properties;
              &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.wrapped = (&lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt;) map;
          }
      
          &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; get(&lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; key) {
              &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (resolved.containsKey(key)) {
                  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; resolved.get(key);
              }
      
              &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (currentResolutionStack.contains(key)) {
                  &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;IllegalArgumentException&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Property '&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; + key + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;' indirectly references itself in its value.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
              }
      
              &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; rawValue = getRaw(key);
      
              &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rawValue == &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;) {
                  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;;
              }
      
              currentResolutionStack.push(key.toString());
      
              &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; ret = readAll(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TokenReplacingReader(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;StringReader&lt;/span&gt;(rawValue.toString()), &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;));
      
              currentResolutionStack.pop();
      
              resolved.put(key, ret);
      
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;
          }
      
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; getRaw(&lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; key) {
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; wrapped.get(key);
          }
      
          &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; put(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; key, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; value) {
              resolved.remove(key);
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; wrapped.put(key, value);
          }
      
          &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; putAll(&lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt;&amp;lt;? &lt;span class=&quot;directive&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;, ? &lt;span class=&quot;directive&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; m) {
              &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; key : m.keySet()) {
                  resolved.remove(key);
              }
              wrapped.putAll(m);
          }
      
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; putAll(&lt;span class=&quot;predefined-type&quot;&gt;Properties&lt;/span&gt; properties) {
              &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; propName : properties.stringPropertyNames()) {
                  put(propName, properties.getProperty(propName));
              }
          }
      
          &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; clear() {
              wrapped.clear();
              resolved.clear();
          }
      
          &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; containsKey(&lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; key) {
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; wrapped.containsKey(key);
          }
      
          &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Set&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; keySet() {
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; wrapped.keySet();
          }
      
          &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; containsValue(&lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; value) {
              &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; key : keySet()) {
                  &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; thisVal = get(key);
                  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (thisVal == &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;) {
                      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (value == &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;) {
                          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;;
                      }
                  } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
                      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (thisVal.equals(value)) {
                          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;;
                      }
                  }
              }
      
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;;
          }
      
          &lt;span class=&quot;comment&quot;&gt;/**
           * Checks whether this map contains the unprocessed value.
           *
           * @param value
           * @return
           */&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; containsRawValue(&lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; value) {
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; wrapped.containsValue(value);
          }
      
          &lt;span class=&quot;comment&quot;&gt;/**
           * The returned set &amp;lt;b&amp;gt;IS NOT&amp;lt;/b&amp;gt; backed by this map
           * (unlike in the default map implementations).
           * &amp;lt;p&amp;gt;
           * The {@link java.util.Map.Entry#setValue(Object)} method
           * does modify this map though.
           */&lt;/span&gt;
          &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Set&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt;.Entry&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt;&amp;gt; entrySet() {
              &lt;span class=&quot;predefined-type&quot;&gt;Set&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt;.Entry&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt;&amp;gt; ret = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;HashSet&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt;.Entry&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt;&amp;gt;();
              &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt;.Entry&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; entry : wrapped.entrySet()) {
                  ret.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Entry(entry, &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;));
              }
      
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;
          }
      
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Set&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt;.Entry&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt;&amp;gt; getRawEntrySet() {
              &lt;span class=&quot;predefined-type&quot;&gt;Set&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt;.Entry&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt;&amp;gt; ret = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;HashSet&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt;.Entry&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt;&amp;gt;();
              &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt;.Entry&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; entry : wrapped.entrySet()) {
                  ret.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Entry(entry, &lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;));
              }
      
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;
          }
      
          &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; remove(&lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; key) {
              resolved.remove(key);
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; wrapped.remove(key).toString();
          }
      
          &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; size() {
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; wrapped.size();
          }
      
          &lt;span class=&quot;comment&quot;&gt;/**
           * Unlike in the default implementation the collection returned
           * from this method &amp;lt;b&amp;gt;IS NOT&amp;lt;/b&amp;gt; backed by this map.
           */&lt;/span&gt;
          &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Collection&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; values() {
              &lt;span class=&quot;predefined-type&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; ret = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt;();
              &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; key : keySet()) {
                  ret.add(get(key));
              }
      
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;
          }
      
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Collection&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; getRawValues() {
              &lt;span class=&quot;predefined-type&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; ret = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt;();
              &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; key : keySet()) {
                  ret.add(wrapped.get(key));
              }
      
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;
          }
      
          &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; readAll(&lt;span class=&quot;predefined-type&quot;&gt;Reader&lt;/span&gt; rdr) {
              &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; in = -&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;;
              &lt;span class=&quot;predefined-type&quot;&gt;StringBuilder&lt;/span&gt; bld = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;StringBuilder&lt;/span&gt;();
              &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
                  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ((in = rdr.read()) != -&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;) {
                      bld.append((&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt;) in);
                  }
              } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;exception&quot;&gt;IOException&lt;/span&gt; e) {
                  &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;IllegalStateException&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Exception while reading a string.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, e);
              }
      
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bld.toString();
          }
      }&lt;/pre&gt;&lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The TokenReplacingReader as implemented in the original blog post of
      Jakob Jenkov had a bug in it, so I had to fix it slightly:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
        &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
      2
      3
      4
      5
      6
      7
      8
      9
      &lt;strong&gt;10&lt;/strong&gt;
      11
      12
      13
      14
      15
      16
      17
      18
      19
      &lt;strong&gt;20&lt;/strong&gt;
      21
      22
      23
      24
      25
      26
      27
      28
      29
      &lt;strong&gt;30&lt;/strong&gt;
      31
      32
      33
      34
      35
      36
      37
      38
      39
      &lt;strong&gt;40&lt;/strong&gt;
      41
      42
      43
      44
      45
      46
      47
      48
      49
      &lt;strong&gt;50&lt;/strong&gt;
      51
      52
      53
      54
      55
      56
      57
      58
      59
      &lt;strong&gt;60&lt;/strong&gt;
      61
      62
      63
      64
      65
      66
      67
      68
      69
      &lt;strong&gt;70&lt;/strong&gt;
      71
      72
      73
      74
      75
      76
      77
      78
      79
      &lt;strong&gt;80&lt;/strong&gt;
      81
      82
      83
      84
      85
      86
      87
      88
      89
      &lt;strong&gt;90&lt;/strong&gt;
      91
      92
      93
      94
      95
      96
      97
      98
      99
      &lt;strong&gt;100&lt;/strong&gt;
      101
      102
      103
      104
      105
      106
      107
      108
      109
      &lt;strong&gt;110&lt;/strong&gt;
      111
      112
      113
      114
      115
      116
      117
      118
      119&lt;/pre&gt;&lt;/td&gt;
        &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;comment&quot;&gt;/**
       * Copied from http://tutorials.jenkov.com/java-howto/replace-strings-in-streams-arrays-files.html
       * with fixes to {@link #read(char[], int, int)} and added support for escaping.
       *
       * @author Lukas Krejci
       */&lt;/span&gt;
      &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;TokenReplacingReader&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Reader&lt;/span&gt; {
      
          &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;PushbackReader&lt;/span&gt; pushbackReader = &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;;
          &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt;&amp;gt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; tokens = &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;;
          &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;StringBuilder&lt;/span&gt; tokenNameBuffer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;StringBuilder&lt;/span&gt;();
          &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; tokenValue = &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;;
          &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; tokenValueIndex = &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;;
          &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; escaping = &lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;;
      
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; TokenReplacingReader(&lt;span class=&quot;predefined-type&quot;&gt;Reader&lt;/span&gt; source, &lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt;&amp;gt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; tokens) {
              &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.pushbackReader = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;PushbackReader&lt;/span&gt;(source, &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;);
              &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.tokens = tokens;
          }
      
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; read(&lt;span class=&quot;predefined-type&quot;&gt;CharBuffer&lt;/span&gt; target) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;IOException&lt;/span&gt; {
              &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Operation Not Supported&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
          }
      
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; read() &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;IOException&lt;/span&gt; {
              &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.tokenValue != &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;) {
                  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.tokenValueIndex &amp;gt; &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.tokenValue.length()) {
                      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.tokenValue.charAt(&lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.tokenValueIndex++);
                  }
                  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.tokenValueIndex == &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.tokenValue.length()) {
                      &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.tokenValue = &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;;
                      &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.tokenValueIndex = &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;;
                  }
              }
      
              &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; data = &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.pushbackReader.read();
      
              &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (escaping) {
                  escaping = &lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;;
                  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; data;
              }
      
              &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (data == &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
                  escaping = &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;;
                  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; data;
              }
      
              &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (data != &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
                  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; data;
      
              data = &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.pushbackReader.read();
              &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (data != &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
                  &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.pushbackReader.unread(data);
                  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;;
              }
              &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.tokenNameBuffer.delete(&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.tokenNameBuffer.length());
      
              data = &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.pushbackReader.read();
              &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (data != &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
                  &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.tokenNameBuffer.append((&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt;) data);
                  data = &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.pushbackReader.read();
              }
      
              &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.tokenValue = tokens.get(&lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.tokenNameBuffer.toString());
      
              &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.tokenValue == &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;) {
                  &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.tokenValue = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; + &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.tokenNameBuffer.toString() + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
              }
      
              &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.tokenValue.isEmpty()) {
                  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.tokenValue.charAt(&lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.tokenValueIndex++);
              } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
                  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; read();
              }
          }
      
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; read(&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; cbuf&lt;span class=&quot;type&quot;&gt;[]&lt;/span&gt;) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;IOException&lt;/span&gt; {
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; read(cbuf, &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;, cbuf.length);
          }
      
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; read(&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; cbuf&lt;span class=&quot;type&quot;&gt;[]&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; off, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;IOException&lt;/span&gt; {
              &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;;
              &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (; i &amp;gt; len; i++) {
                  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; nextChar = read();
                  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (nextChar == -&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;) {
                      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i == &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;) {
                          i = -&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;;
                      }
                      &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;
                  }
                  cbuf[off + i] = (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt;) nextChar;
              }
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i;
          }
      
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; close() &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;IOException&lt;/span&gt; {
              &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.pushbackReader.close();
          }
      
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; skip(&lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; n) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;IOException&lt;/span&gt; {
              &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;UnsupportedOperationException&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;skip() not supported on TokenReplacingReader.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
          }
      
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; ready() &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;IOException&lt;/span&gt; {
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.pushbackReader.ready();
          }
      
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; markSupported() {
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;;
          }
      
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; mark(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; readAheadLimit) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;IOException&lt;/span&gt; {
              &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;IOException&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;mark() not supported on TokenReplacingReader.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
          }
      
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; reset() &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;IOException&lt;/span&gt; {
              &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;IOException&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;reset() not supported on TokenReplacingReader.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
          }
      }&lt;/pre&gt;&lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://lukas.krejci.pw/posts/2011/03/30/planning-configuration-and-templates-exportimport-in-rhq/</id>
    <title>Planning configuration and templates export/import in RHQ</title>
    <updated>2014-11-24T23:25:00+01:00</updated>
    <published>2011-03-30T00:00:00+00:00</published>
    <link href="http://lukas.krejci.pw/posts/2011/03/30/planning-configuration-and-templates-exportimport-in-rhq/" rel="alternate" type="text/html" />
    <category term="rhq"></category>
    <summary>
      
      We are currently starting to think about what would it take to implement
      exporting and importing various "configuration" elements including
      metric and alert templates, server configuration, dynagroup definitions,
      users &amp; roles and possibly other "entities" between different RHQ
      installations.
      
      
      We were asked for this functionality a couple of times in the past and
      now has come the time when we&#8217;d like to take a stab at it. But for that
      to be truly useful, we need user feedback. If you have some strong
      opinions about what parts of the RHQ server&#8217;s "configuration" (which in
      essence is everything but the inventory) should be exportable, please
      shout now. You can leave your...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We are currently starting to think about what would it take to implement
      exporting and importing various &quot;configuration&quot; elements including
      metric and alert templates, server configuration, dynagroup definitions,
      users &amp;amp; roles and possibly other &quot;entities&quot; between different RHQ
      installations.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We were asked for this functionality a couple of times in the past and
      now has come the time when we’d like to take a stab at it. But for that
      to be truly useful, we need user feedback. If you have some strong
      opinions about what parts of the RHQ server’s &quot;configuration&quot; (which in
      essence is everything but the inventory) should be exportable, please
      shout now. You can leave your feedback here or send a message to either
      of our mailing lists
      (&lt;a href=&quot;https://fedorahosted.org/mailman/listinfo/rhq-devel&quot;&gt;rhq-devel&lt;/a&gt;,
      &lt;a href=&quot;https://fedorahosted.org/mailman/listinfo/rhq-users&quot;&gt;rhq-users&lt;/a&gt;) or even
      post a message to our &lt;a href=&quot;http://community.jboss.org/en/jopr&quot;&gt;forums&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I’ve started a
      &lt;a href=&quot;http://wiki.rhq-project.org/display/RHQ/Design+-+Configuration+synchronization&quot;&gt;wiki
      page&lt;/a&gt; about the subject if you want to know what our current thinking
      about all this is. Since this is in a very early stage of planning, just
      about everything is up to debate. To start off the discussion, I’d like
      to answer the following questions:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;What parts of RHQ would you like to sync between RHQ servers?&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;server configuration&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;users&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;roles&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;metric templates&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;alert templates&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;content sources&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;repos&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;packages&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;dyna groups&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;plugins&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;configuration, connection settings of a resource&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;metric schedules of a resource&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;alert definitions of a resource&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;How granular should the export be?&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;all or nothing - i.e. &quot;true&quot; sync&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;per &quot;subsystem&quot; (i.e. all users&amp;amp;roles, all templates, content sources
      &amp;amp;repos &amp;amp; packages, …​)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;pick and choose individual entities&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;How segmented should the export be?&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;lump different entity types together in one export file&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;export per &quot;subsystem&quot;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;When should the import be run?&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;during RHQ server installation&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;any time&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If you want to shape the future of RHQ, now’s the time! ;-)&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://lukas.krejci.pw/posts/2011/03/08/scripted-alert-notifications-in-rhq/</id>
    <title>Scripted alert notifications in RHQ</title>
    <updated>2014-11-24T23:25:00+01:00</updated>
    <published>2011-03-08T00:00:00+00:00</published>
    <link href="http://lukas.krejci.pw/posts/2011/03/08/scripted-alert-notifications-in-rhq/" rel="alternate" type="text/html" />
    <category term="rhq"></category>
    <summary>
      
      Since RHQ3, we support "alert sender" server plugins. Basically an alert
      sender is a piece of code that can generate some sort of response to the
      firing of an alert.
      
      
      There&#8217;s a whole bunch of these in RHQ, including:
      
      
      
      
      emails - sending emails to the configured addresses that an alert
      occured within the system
      
      
      roles, users - notifying members of given roles or users about the
      alert
      
      
      mobicents - sends SMS messages about the alert
      
      
      log4j - writes a log entry when the alert fires
      
      
      operation - executes an operation on some resource in the RHQ
      inventory when the alert fires
      
      
      &#8230;&#8203;
      
      
      
      
      This blog post is about a new such alert sender that...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Since RHQ3, we support &quot;alert sender&quot; server plugins. Basically an alert
      sender is a piece of code that can generate some sort of response to the
      firing of an alert.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There’s a whole bunch of these in RHQ, including:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;emails - sending emails to the configured addresses that an alert
      occured within the system&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;roles, users - notifying members of given roles or users about the
      alert&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;mobicents - sends SMS messages about the alert&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;log4j - writes a log entry when the alert fires&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;operation - executes an operation on some resource in the RHQ
      inventory when the alert fires&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;…​&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This blog post is about a new such alert sender that is capable of
      executing a CLI script.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;RHQ has a command-line client, the CLI, which is able to remotely
      connect to an RHQ server and execute commands on it. Basically the CLI
      enables the users to use the Remote API of the RHQ server in a
      Javascript environment.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Now with the CLI scripts as the alert notifications you have the same
      power at your fingertips as you have in the CLI directly on the server.
      The scripts can do literally anything you can do in your CLI scripts.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As an example, consider the following script:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
        &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
      2
      3
      4
      5
      6
      7
      8
      9
      &lt;strong&gt;10&lt;/strong&gt;
      11
      12
      13
      14
      15
      16
      17
      18
      19
      &lt;strong&gt;20&lt;/strong&gt;
      21
      22
      23
      24
      25
      26
      27
      28
      29
      &lt;strong&gt;30&lt;/strong&gt;
      31
      32
      33
      34
      35
      36
      37
      38
      39
      &lt;strong&gt;40&lt;/strong&gt;
      41
      42
      43
      44
      45
      46
      47
      48
      49
      &lt;strong&gt;50&lt;/strong&gt;
      51
      52
      53
      54
      55
      56
      57
      58
      59
      &lt;strong&gt;60&lt;/strong&gt;
      61
      62
      63
      64&lt;/pre&gt;&lt;/td&gt;
        &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;comment&quot;&gt;/*
       * This script is supposed to be notifying about alerts on a web application.
       * It will save some stats into a file on the RHQ server and then invoke a bash
       * script if it finds it necessary.
       */&lt;/span&gt;
      
      &lt;span class=&quot;comment&quot;&gt;//get the proxied resource so that I can use the more convenient syntax than&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;//just the raw calls to the remote APIs&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;//notice the predefined variable 'alert' that contains the object of the alert that is being&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;//fired&lt;/span&gt;
      var myResource = ProxyFactory.getResource(alert.alertDefinition.resource.id)
      
      &lt;span class=&quot;comment&quot;&gt;//find the metric (aka measurement) for the &quot;Sessions created per Minute&quot;&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;//this will give us the picture about the load on the web app&lt;/span&gt;
      var definitionCriteria = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MeasurementDefinitionCriteria()
      definitionCriteria.addFilterDisplayName(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Sessions created per Minute&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
      definitionCriteria.addFilterResourceTypeId(myResource.resourceType.id)
      
      var definitions = MeasumentDefinitionManager.findMeasurementDefinitionsByCriteria(definitionCriteria)
      
      &lt;span class=&quot;comment&quot;&gt;//only continue if we have the definition&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (definitions.empty) {
         &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; java.lang.Exception(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Could not get 'Sessions created per Minute' metric on resource &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
            + myResource.id)
      }
      
      var definition = definitions.get(&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;)
      
      &lt;span class=&quot;comment&quot;&gt;//start date is now - 8hrs&lt;/span&gt;
      var startDate = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Date&lt;/span&gt;() - &lt;span class=&quot;integer&quot;&gt;8&lt;/span&gt; * &lt;span class=&quot;integer&quot;&gt;3600&lt;/span&gt; * &lt;span class=&quot;integer&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//8 hrs in milliseconds&lt;/span&gt;
      var endDate = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Date&lt;/span&gt;()
      
      &lt;span class=&quot;comment&quot;&gt;//get the data of the metric for the last 8 hours, chunked up to 60 intervals&lt;/span&gt;
      var data = MeasurementDataManager.findDataForResource(myResource.id, [ definition.id ], startDate, endDate, &lt;span class=&quot;integer&quot;&gt;60&lt;/span&gt;)
      
      exporter.setTarget(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/the/output/folder/for/my/metrics/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt; + endDate + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.csv&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
      
      &lt;span class=&quot;comment&quot;&gt;//the data contains an entry for each of the definitions we asked the data for...&lt;/span&gt;
      exporter.write(data.get(&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;))
      
      &lt;span class=&quot;comment&quot;&gt;//ok, we've exported the stats&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;//now we want to make sure that our database is still running&lt;/span&gt;
      
      &lt;span class=&quot;comment&quot;&gt;//let's suppose the resource id of the datasource is &quot;well-known&quot;&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;//we could get it using criteria APIs as well, of course&lt;/span&gt;
      var dataSource = ProxyFactory.getResource(&lt;span class=&quot;integer&quot;&gt;10411&lt;/span&gt;)
      
      &lt;span class=&quot;comment&quot;&gt;//now check if the datasource's underlying connection is up&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;//There is an operation defined on a &quot;Data Source&quot; resource type, which we can call&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;//as a simple javascript method on the resource proxy&lt;/span&gt;
      connectionTest = dataSource.testConnection()
      
      &lt;span class=&quot;comment&quot;&gt;//the result will be null, if the operation couldn't be invoked at all or if it took&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;//too long. Otherwise it will be a configuration object representing the operation&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;//results as defined by the operation definition.&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;//In this case, the result of an operation is a configuration object with a single&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;//property called &quot;result&quot; which is true if the connection could be established and&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;//false otherwise&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (connectionTest == &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt; || connectionTest.get(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).booleanValue == &lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;) {
          &lt;span class=&quot;comment&quot;&gt;//ok, this means we had problems connecting to the database&lt;/span&gt;
          &lt;span class=&quot;comment&quot;&gt;//let's suppose there's an executable bash script somewhere on the server that&lt;/span&gt;
          &lt;span class=&quot;comment&quot;&gt;//the admins use to restart the database&lt;/span&gt;
          java.lang.Runtime.getRuntime().exec(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/somewhere/on/the/server/restart-database.sh&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
      }&lt;/pre&gt;&lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In another words, it is quite powerful :)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There is a design wiki page with documentation of the feature, if you’re
      interested in reading more about it:&lt;br&gt;
      &lt;a href=&quot;http://wiki.rhq-project.org/display/RHQ/Design+-Serverside+scripts%5Bhttp://wiki.rhq-project.org/display/RHQ/Design-+Serverside+scripts&quot; class=&quot;bare&quot;&gt;http://wiki.rhq-project.org/display/RHQ/Design+-Serverside+scripts[http://wiki.rhq-project.org/display/RHQ/Design-+Serverside+scripts&lt;/a&gt;]&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There’s the brand new &lt;a href=&quot;http://rhq-project.org/display/RHQ/Download&quot;&gt;RHQ
      4.0.0.Beta1&lt;/a&gt; out that contains this new feature. Go check it out!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For the impatient, I recorded a short screencast of the new feature in
      action. &lt;a href=&quot;http://vimeo.com/20791639&quot; class=&quot;bare&quot;&gt;http://vimeo.com/20791639&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;It is best viewed in HD but for that you have to view it directly on
      vimeo.com. Just click the &quot;HD&quot; in the video.&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://lukas.krejci.pw/posts/2010/10/06/upgrading-resources-in-rhq/</id>
    <title>Upgrading Resources In RHQ</title>
    <updated>2014-11-24T23:25:00+01:00</updated>
    <published>2010-10-06T00:00:00+00:00</published>
    <link href="http://lukas.krejci.pw/posts/2010/10/06/upgrading-resources-in-rhq/" rel="alternate" type="text/html" />
    <category term="rhq"></category>
    <summary>
      
      Humans make mistakes. That&#8217;s because they learn and by making mistakes
      and experimenting they perfect their skills. Computers on the other hand
      only do as they are told. When a human interacts with the computer, she
      expects the computer to be human-like to the extent that it can recover
      or react to the mistakes she makes while learning the rules of
      interaction with it.
      
      
      In case of RHQ one of the users is a plugin
      developer. An RHQ (agent) plugin is a "thing" that talks to some other
      software and can configure and monitor it. The other type of the RHQ
      user is the system administrator that uses RHQ...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Humans make mistakes. That’s because they learn and by making mistakes
      and experimenting they perfect their skills. Computers on the other hand
      only do as they are told. When a human interacts with the computer, she
      expects the computer to be human-like to the extent that it can recover
      or react to the mistakes she makes while learning the rules of
      interaction with it.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In case of &lt;a href=&quot;http://www.rhq-project.org&quot;&gt;RHQ&lt;/a&gt; one of the users is a plugin
      developer. An RHQ (agent) plugin is a &quot;thing&quot; that talks to some other
      software and can configure and monitor it. The other type of the RHQ
      user is the system administrator that uses RHQ and its plugins to manage
      their IT infrastructure. For the administrator, the plugin becomes part
      of the &quot;computer&quot;. But the plugin is made by humans and humans make
      mistakes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;One of the mistakes the plugin developer can make is to assign a wrong
      &quot;resource key&quot; during the discovery of resources. A resource key is
      something that uniquely identifies the particular &quot;resource&quot; the plugin
      can talk to. You can dive much deeper into the details of this
      &lt;a href=&quot;http://rhq-project.org/display/RHQ/Writing+Custom+Plugins#WritingCustomPlugins-Identity&quot;&gt;here&lt;/a&gt;
      but in a nutshell, the resource key is extracted from the data the
      plugin can gather about a resource in such a way that if at some later
      point in time the plugin is told to rediscover the resources it can
      manage, the resource key will remain the same for the same resources.
      Usually, the resource key is a file-system location of some significant
      configuration file, an installation directory, a port a service is
      listening on, a CPU id, a mount point, etc. Whatever fits the need of
      the particular plugin.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If the plugin developer realized she made a mistake in the way the
      resource key is generated and that it for example doesn’t identify the
      resource in a completely unique way, the only thing she could do is to
      create a new version of the plugin with the fix and distribute it to her
      customers. Easy.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;But the consequences for the customers (i.e. the system administrators)
      were quite severe. Because the resource key algorithm changed, the
      resources that they already had in their inventories and that they
      managed, collected stats on, had alerts defined for, etc. suddenly
      became defunct and a new resource (or even more resources, with the new
      resource keys) appeared in their place. The administrator would then
      have to go and define their alerts, add the new resource(s) to the
      groups they defined for them, etc. all over again. Not to mention the
      fact the historical data would from now on be split between the &quot;old&quot;
      and &quot;new&quot; resource so if the admin wanted to retain the historical data
      they could not just delete the defunct resource. They’d have to keep it
      in their inventory in which the resource would forever stay in
      unavailable state showing red icons signifying a problem where there
      wouldn’t be any (well, the problem was on the plugin developer side, but
      the admin would suffer for it).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;But all that changed.&lt;/strong&gt; Yesterday, I merged in a new feature that
      enables the plugin developers to fix their past mistakes in a way that
      the system admins wouldn’t be punished for.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I called the process &quot;resource upgrade&quot; because it enables the plugin
      developers to change the data of the existing resources to &quot;upgrade&quot;
      them so that they conform to the latest version of the plugin code. For
      now the feature is quite rudimentary and only enables to upgrade the
      resource key, resource name and description. Obviously, the other big
      candidates for upgrade would be the plugin configuration (aka connection
      settings) and resource configuration. When we were thinking about this
      though we realized that not only would implmenenting the configuration
      upgrades be quite complex because we would basically have to break the
      fundamental principle of RHQ configuration which is that the RHQ server
      is the authoritative source of configuration data, but we couldn’t find
      a plugin that would benefit from such capability.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If you happen to have a custom RHQ plugin for your piece of software and
      say to yourself, damn, why oh why didn’t they think about my use case,
      I’d love to be able to upgrade the configuration of existing resources,
      please leave a comment here. I’d love to hear about your needs so that
      we can think about supporting them in the future.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When I said that the resource upgrade supports upgrading the resource
      name and description I partially lied though. The actual update of these
      is guarded by a server configuration setting because both resource name
      and description can be updated by the users and we wouldn’t want to
      overwrite their updates without consent. For now there is even no way to
      enable that setting in the UI even though it’d be trivial to add. The
      problem with this is that for this feature to be useful to our current
      community and customers, we’d have to update all the plugins with code
      that would implement it which becomes a substantial amount of work with
      our 30+ plugins at the moment. But if you feel like you absolutely need
      this, contact our team. Anything is possible when there’s enough backing
      ;)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can read more about the technicalities of the implementation on our
      &lt;a href=&quot;http://rhq-project.org/display/RHQ/Design+-+Resource+Upgrade&quot;&gt;wiki&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://lukas.krejci.pw/posts/2010/09/20/database-setup-for-testng-tests/</id>
    <title>Database setup for TestNG tests</title>
    <updated>2014-11-24T23:25:00+01:00</updated>
    <published>2010-09-20T00:00:00+00:00</published>
    <link href="http://lukas.krejci.pw/posts/2010/09/20/database-setup-for-testng-tests/" rel="alternate" type="text/html" />
    <category term="java"></category>
    <category term="rhq"></category>
    <summary>
      
      In my
      previous
      post I talked about the approach I took to export data from a database
      using a JPA model. I also mentioned that that was a part of a larger
      effort to support performance testing that we are currently implementing
      for RHQ. This post is a follow-up on that
      theme. This time we&#8217;re going to take a look at how to use the exported
      data in TestNG based tests.
      
      
      The problem at hand is basically restoring the database to the exact
      state as it was when the data for the test was exported. This gets
      non-trivial in an evolving project like RHQ where we constantly change
      the DB schema...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In my
      &lt;a href=&quot;http://metlos.wordpress.com/2010/09/15/how-to-export-data-from-a-db-using-jpa-model/&quot;&gt;previous
      post&lt;/a&gt; I talked about the approach I took to export data from a database
      using a JPA model. I also mentioned that that was a part of a larger
      effort to support performance testing that we are currently implementing
      for &lt;a href=&quot;http://www.rhq-project.org&quot;&gt;RHQ&lt;/a&gt;. This post is a follow-up on that
      theme. This time we’re going to take a look at how to use the exported
      data in &lt;a href=&quot;http://testng.org&quot;&gt;TestNG&lt;/a&gt; based tests.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The problem at hand is basically restoring the database to the exact
      state as it was when the data for the test was exported. This gets
      non-trivial in an evolving project like RHQ where we constantly change
      the DB schema to either add new features or to do performance
      enhancements. Before each test, we therefore need to do the following:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;Recreate the database to the minimum supported version.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Upgrade the database schema to the version from which the data for
      the test was exported from.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Import the test data.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Upgrade the schema (now with the correct data) to the latest
      database version.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Run the test.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;TestNG is all about annotations so all this should ideally happen
      transparently to the test just by annotating the methods somehow. As far
      as I know there is no easy way to add a new custom annotation to TestNG
      core, but fortunately TestNG 5.12 added support for
      &lt;a href=&quot;http://testng.org/javadocs/index.html?org/testng/annotations/Listeners.html&quot;&gt;&lt;code&gt;@Listeners&lt;/code&gt;&lt;/a&gt;
      annotation which can be used to add any TestNG defined listener to the
      test. By implementing
      &lt;a href=&quot;http://testng.org/javadocs/index.html?org/testng/IInvokedMethodListener.html&quot;&gt;&lt;code&gt;IInvokedMethodListener&lt;/code&gt;&lt;/a&gt;,
      we can check for presence of our new annotations on the tests and thus
      effectively implement a new TestNG &quot;managed&quot; annotation.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;With &lt;code&gt;@Listeners&lt;/code&gt; and &lt;code&gt;IInvokedMethodListener&lt;/code&gt;, the implementation is
      quite easy. We can define a simple annotation that will provide
      configuration for restoring the database state to be used on the test
      methods and implement the setup in our method listener.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Let’s take a look at the actual database state annotation copied from
      our code base:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
        &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
      2
      3
      4
      5
      6
      7
      8
      9
      &lt;strong&gt;10&lt;/strong&gt;
      11
      12
      13
      14
      15
      16
      17
      18
      19
      &lt;strong&gt;20&lt;/strong&gt;
      21
      22
      23
      24
      25
      26
      27
      28
      29
      &lt;strong&gt;30&lt;/strong&gt;
      31
      32
      33
      34
      35
      36
      37
      38
      39&lt;/pre&gt;&lt;/td&gt;
        &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;comment&quot;&gt;/**
       * An annotation to associate a test method with a required state of the database.
       *
       * @author Lukas Krejci
       */&lt;/span&gt;
      &lt;span class=&quot;annotation&quot;&gt;@Retention&lt;/span&gt;(value = &lt;span class=&quot;predefined-type&quot;&gt;RetentionPolicy&lt;/span&gt;.RUNTIME)
      &lt;span class=&quot;annotation&quot;&gt;@Target&lt;/span&gt;(value = { &lt;span class=&quot;predefined-type&quot;&gt;ElementType&lt;/span&gt;.METHOD })
      &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;annotation&quot;&gt;@interface&lt;/span&gt; DatabaseState {
      
          &lt;span class=&quot;comment&quot;&gt;/**
           * The location of the database state export file.
           */&lt;/span&gt;
          &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; url();
      
          &lt;span class=&quot;comment&quot;&gt;/**
           * The version of the RHQ database the export file is generated from.
           * Before the data from the export file are imported into the database, the database
           * is freshly created and upgraded to this version. After that, the export file
           * is imported to it and the database is then upgraded to the latest version.
           */&lt;/span&gt;
          &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; dbVersion();
      
          &lt;span class=&quot;comment&quot;&gt;/**
           * Where is the export file accessible from (defaults to {@link DatabaseStateStorage#CLASSLOADER}).
           */&lt;/span&gt;
          DatabaseStateStorage storage() &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; DatabaseStateStorage.CLASSLOADER;
      
          &lt;span class=&quot;comment&quot;&gt;/**
           * The format of the export file (defaults to zipped xml).
           */&lt;/span&gt;
          FileFormat format() &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; FileFormat.ZIPPED_XML;
      
          &lt;span class=&quot;comment&quot;&gt;/**
           * The name of the method to provide a JDBC connection object.
           * If the method is not specified, the value of the {@link JdbcConnectionProviderMethod} annotation
           * is used.
           */&lt;/span&gt;
          &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; connectionProviderMethod() &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
      }&lt;/pre&gt;&lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A test class that would use these would look something like this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
        &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
      2
      3
      4
      5
      6
      7
      8
      9&lt;/pre&gt;&lt;/td&gt;
        &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;annotation&quot;&gt;@Listeners&lt;/span&gt;(DatabaseSetupInterceptor.class)
      &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;MyDbTests&lt;/span&gt; {
      
          &lt;span class=&quot;annotation&quot;&gt;@Test&lt;/span&gt;
          &lt;span class=&quot;annotation&quot;&gt;@DatabaseState&lt;/span&gt;(url = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;my-exported-data.xml.zip&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, dbVersion = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;2.94&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; test1() {
              ...
          }
      }&lt;/pre&gt;&lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I think that most of that is pretty self-explanatory. The only thing
      that needs explained further is the &lt;code&gt;dbVersion&lt;/code&gt; and how we are dealing
      with setting up and upgrading the database schema.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In RHQ we have been using our home-grown
      &lt;a href=&quot;http://git.fedorahosted.org/git/?p=rhq/rhq.git;a=tree;f=modules/core/dbutils&quot;&gt;dbutils&lt;/a&gt;
      that use one XML file to store the &quot;current&quot; database schema definitions
      and another XML file (db-upgrade.xml) to detail the individual upgrade
      steps that evolve the schema (each such step is considered a schema
      &quot;version&quot;). The first XML is used for clean installations and the other
      is used to upgrade a schema used in previous versions to the current
      one. The &lt;code&gt;dbVersion&lt;/code&gt; therefore specifies the version from the
      &lt;code&gt;db-upgrade.xml&lt;/code&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;And that’s basically it. You can check the implementation of the
      &lt;a href=&quot;http://git.fedorahosted.org/git/?p=rhq/rhq.git;a=blob;f=modules/helpers/perftest-support/src/main/java/org/rhq/helpers/perftest/support/testng/DatabaseSetupInterceptor.java;hb=perftest&quot;&gt;DatabaseSetupInterceptor&lt;/a&gt;
      which does exactly the points 1 to 4 mentioned above.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As a final, slightly unrelated, note, we are currently thinking about
      migrating our own database setup/upgrade tool to
      &lt;a href=&quot;http://liquibase.org&quot;&gt;liquibase&lt;/a&gt;. I think that the above approach should
      be easily transferable to it by changing the dbVersion attribute to the
      liquibase’s changeset id/author/file combo but I’m no expert in
      liquibase. If you happen to know liquibase and think otherwise, please
      leave a comment here and we’ll get in touch ;)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As with the export tool described in the previous post, I tried to
      implement this in a way that wouldn’t be tied to RHQ so this could
      potentially be used in other projects (well, with this time, you’d
      either have to adopt our dbutils or liquibase, but I think even this
      could be made configurable).&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://lukas.krejci.pw/posts/2010/09/15/how-to-export-data-from-a-db-using-jpa-model/</id>
    <title>How to export data from a DB using JPA model</title>
    <updated>2014-11-24T23:25:00+01:00</updated>
    <published>2010-09-15T00:00:00+00:00</published>
    <link href="http://lukas.krejci.pw/posts/2010/09/15/how-to-export-data-from-a-db-using-jpa-model/" rel="alternate" type="text/html" />
    <category term="java"></category>
    <category term="rhq"></category>
    <summary>
      
      In RHQ, we are currently contemplating
      implementing a series of automated performance tests. For those tests to
      make any sense, we have to provide them with some initial data to work
      with.
      
      
      So the goal is quite simple. Export some defined dataset from an
      existing database, store it away and import it back again before a test
      is run. Easy. When I started researching the export part of the problem,
      I thought there&#8217;s bound to be something out there already in existence
      that would do the job. And I was right. The
      dbUnit project is exactly what I was looking for.
      They support extraction of the data from the database...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In &lt;a href=&quot;http://www.rhq-project.org&quot;&gt;RHQ&lt;/a&gt;, we are currently contemplating
      implementing a series of automated performance tests. For those tests to
      make any sense, we have to provide them with some initial data to work
      with.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So the goal is quite simple. Export some defined dataset from an
      existing database, store it away and import it back again before a test
      is run. Easy. When I started researching the export part of the problem,
      I thought there’s bound to be something out there already in existence
      that would do the job. And I was right. The
      &lt;a href=&quot;http://www.dbunit.org&quot;&gt;dbUnit&lt;/a&gt; project is exactly what I was looking for.
      They support extraction of the data from the database and can even
      follow the foreign key relationships (in both ways) to export the
      necessary data to keep referential integrity. Great.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;But wait. Our data model isn’t that simple. I certainly want all the
      data that my core dataset depends on to be included in the export, but I
      also want &lt;strong&gt;some&lt;/strong&gt; of the data that depends on my dataset.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Ok that didn’t make much sense, so let me introduce a little example to
      explain the problems on. First, let’s look at the class diagram, that
      will show the relationships between different entities in the model.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;../../../../../images/class-diagram.png&quot; data-lightbox=&quot;1&quot;&gt;
      &lt;span class=&quot;image thumb&quot;&gt;&lt;img src=&quot;http://lukas.krejci.pw/images/class-diagram.png&quot; alt=&quot;Class diagram&quot;&gt;&lt;/span&gt;
      &lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;These entities are mapped to these tables:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;../../../../../images/entity-relationship-diagram.png&quot; data-lightbox=&quot;2&quot;&gt;
      &lt;span class=&quot;image thumb&quot;&gt;&lt;img src=&quot;http://lukas.krejci.pw/images/entity-relationship-diagram.png&quot; alt=&quot;Entity diagram&quot;&gt;&lt;/span&gt;
      &lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Now let’s say I wanted to export all the resources with their
      configurations but I’m not interested in the alert definitions.
      Obviously this is going to require some kind of configuration.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I could stay on the database level and for example create a
      configuration where I would specifically state something like &quot;I want
      data from this table.&quot; or &quot;I’m interested in this table and all its
      dependencies but this particular foreign key.&quot; and implement a dbUnit
      search based on this configuration but I’m a Java developer and even
      though I can write my SQL statements and design a (more or less)
      reasonable database schema, I certainly don’t love that job. To find out
      the relationships between tables, looking at the JPA annotated Java code
      is much quicker and more pleasant to me than looking at table and
      foreign key definitions.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Before I dive into more details let me show you the configuration file
      that will achieve the above goal:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
        &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
      2
      3
      4
      5
      6
      7
      8
      9
      &lt;strong&gt;10&lt;/strong&gt;&lt;/pre&gt;&lt;/td&gt;
        &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;graph&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;includeExplicitDependentsImplicitly&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
             &lt;span class=&quot;attribute-name&quot;&gt;packagePrefix&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;org.rhq.core.domain.resource&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;tag&quot;&gt;&amp;lt;entity&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;root&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;tag&quot;&gt;&amp;lt;filter&amp;gt;&lt;/span&gt;SELECT ID FROM RESOURCE WHERE NAME='myResource'&lt;span class=&quot;tag&quot;&gt;&amp;lt;/filter&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;tag&quot;&gt;&amp;lt;rel&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;field&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;tag&quot;&gt;&amp;lt;/entity&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;tag&quot;&gt;&amp;lt;entity&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ResourceType&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;includeAllFields&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;tag&quot;&gt;&amp;lt;rel&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;field&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;exclude&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;tag&quot;&gt;&amp;lt;/entity&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/graph&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This is still a bit of a mouthful but at the same time it’s very
      powerful. What I’m basically saying there is that I want to export a
      resource with the name &quot;myResource&quot; and I only want to include its
      configuration in the export (of course the simple properties of the
      resource are implicitly exported but configuration is the only
      &lt;strong&gt;relationship&lt;/strong&gt; that gets exported along with it). Further, I’m telling
      the exporter that it’s free to export all the data of the ResourceType
      entities my Resource is dependent upon but I don’t want to include the
      resources of the ResourceType in the export. This is to prevent the
      other resources to &quot;leak&quot; to the export due to the explicit relationship
      of the ResourceType and its &quot;child&quot; Resource entities. The mysterious
      “includeExplicitDependetsImplicitly” attribute tells the exporter to
      include all dependents of the entities it encounters unless configured
      otherwise.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I want the above configuration to cause the exporter to include the
      following in the export (look at the above class diagram to get a better
      understanding why I need the below):&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;&quot;myResource&quot; resource&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Its configuration and all its properties&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;The resource type of the resource&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;The configuration definition associated with that resource type&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;All the property definitions of the configuration definition&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;details&quot;&gt;
      &lt;a class=&quot;anchor&quot; href=&quot;#details&quot;&gt;&lt;/a&gt;Details&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To achieve the above functionality I needed to create a bridge that
      would look at the JPA annotations in my domain layer classes and
      translate the relationships expressed there into SQL terms. Once I have
      the SQL representation of the domain model relationships I can feed that
      into dbUnit and use it to export and import the data as well (I also let
      dbUnit figure out the proper insertion order to keep the referential
      integrity but more on that later).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The code turned out to be fairly simple and basically consists of
      creation of an
      &lt;a href=&quot;http://git.fedorahosted.org/git/?p=rhq/rhq.git;a=blob;f=modules/helpers/perftest-support/src/main/java/org/rhq/helpers/perftest/support/jpa/EntityDependencyGraph.java;hb=perftest&quot;&gt;entity
      dependency graph&lt;/a&gt;, where nodes represent the JPA entities and edges
      represent individual relationships (i.e. a directed, cyclic, multiply
      connected graph). The JPA annotations contain all the information to
      translate the entities and their relationships into the terms of SQL
      tables and columns, the translation is only slightly complicated by the
      possibility of relation tables (e.g. a relation table to describe a
      &lt;code&gt;@ManyToMany&lt;/code&gt; relationship) (the code is
      &lt;a href=&quot;http://git.fedorahosted.org/git/?p=rhq/rhq.git;a=blob;f=modules/helpers/perftest-support/src/main/java/org/rhq/helpers/perftest/support/jpa/mapping/MappingTranslator.java;hb=perftest&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;With the SQL mapping at hand I could start linking the code I had with
      the functionality defined in dbUnit. I chose to implement it as a
      &lt;a href=&quot;http://www.dbunit.org/apidocs/index.html?org/dbunit/dataset/filter/ITableFilter.html&quot;&gt;ITableFilter&lt;/a&gt;.
      By inheriting from
      &lt;a href=&quot;http://www.dbunit.org/apidocs/index.html?org/dbunit/database/DatabaseSequenceFilter.html&quot;&gt;DatabaseSequenceFilter&lt;/a&gt;
      I got the correct table order in the export for free and by retaining
      the insertion order in the sets of the allowed PKs while traversing the
      entity dependency graph, I was also able to retain the correct insertion
      order even in cases where a table has a foreign key on itself. My
      &lt;code&gt;EntityRelationshipFilter&lt;/code&gt; can use the above mentioned configuration to
      restrict the traversal of the entity dependency graph and therefore
      restrict the resulting export (by relying on
      &lt;a href=&quot;http://git.fedorahosted.org/git/?p=rhq/rhq.git;a=blob;f=modules/helpers/perftest-support/src/main/java/org/rhq/helpers/perftest/support/jpa/ConfigurableDependencyInclusionResolver.java;hb=perftest&quot;&gt;an
      inclusion resolver&lt;/a&gt; to tell it what to do). You can take a look at the
      code
      &lt;a href=&quot;http://git.fedorahosted.org/git/?p=rhq/rhq.git;a=blob;f=modules/helpers/perftest-support/src/main/java/org/rhq/helpers/perftest/support/dbunit/EntityRelationshipFilter.java;hb=perftest&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;conclusion&quot;&gt;
      &lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Relying on dbUnit to do the &quot;low-level&quot; data export and import for me, I
      could create a &quot;Java developer friendly&quot; data export tool in just a
      little bit more than a week’s time. The good thing is that it is
      completely generic and so it could be easily used with other projects
      than RHQ (of course, more work would be required on the tool in that
      case because the translation from JPA to SQL isn’t completely
      implemented. For example it’s missing handling the implicit values of
      the JPA annotations (e.g. the table name derived from the class name if
      the &lt;code&gt;@Table&lt;/code&gt; annotation doesn’t explicitly specify a name) and I’m sure
      I missed some corner cases in handling the relationships as well. But it
      seems to work for RHQ at the moment which means that it’s already quite
      capable because our domain model isn’t a trivial one. If there was
      interest, I’d be more than happy to help create a standalone
      full-featured tool out of this and take it out of the RHQ
      &lt;a href=&quot;http://git.fedorahosted.org/git/?p=rhq/rhq.git;a=tree;f=modules/helpers/perftest-support;hb=perftest&quot;&gt;source
      code&lt;/a&gt;. You can read even more about the tool on our wiki
      &lt;a href=&quot;http://wiki.rhq-project.org/display/RHQ/Entity+Driven+Database+Setup&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;hr&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In the next blog entry, I’ll take a look at the &quot;import and test&quot; part
      of the solution, namely on the integration of the database setup and
      data import with TestNG.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://lukas.krejci.pw/posts/2010/05/11/measuring-ui-performance/</id>
    <title>Measuring UI Performance</title>
    <updated>2014-11-24T23:25:00+01:00</updated>
    <published>2010-05-11T00:00:00+00:00</published>
    <link href="http://lukas.krejci.pw/posts/2010/05/11/measuring-ui-performance/" rel="alternate" type="text/html" />
    <category term="java"></category>
    <category term="rhq"></category>
    <summary>
      
      RHQ is not built to be used by thousands of
      users at the same time. We rather add features to the page so that it
      contains maximum information and context so that the users can make the
      right decisions about their infrastructure. But even then we do care
      about a responsive and reasonably performing UI (and the system as a
      whole of course).
      
      
      Recently I&#8217;ve been tasked with researching theperformance of our UI layer.
      Obviously there are a thousand factors influencing the responsiveness of the
      UI but for the web app developer,there are only a few s/he can do something
      about. Those in a nutshell are CPU and memory...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://rhq-project.org&quot;&gt;RHQ&lt;/a&gt; is not built to be used by thousands of
      users at the same time. We rather add features to the page so that it
      contains maximum information and context so that the users can make the
      right decisions about their infrastructure. But even then we do care
      about a responsive and reasonably performing UI (and the system as a
      whole of course).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Recently I’ve been tasked with researching theperformance of our UI layer.
      Obviously there are a thousand factors influencing the responsiveness of the
      UI but for the web app developer,there are only a few s/he can do something
      about. Those in a nutshell are CPU and memory usage of the web app itself
      and efficiency in the communication with whatever back-end the webapp is
      using to pull its data from (usually a DB, but in case of RHQ also the
      agents). We did quite a bit of testing on database and agent communication
      but we lacked the performance data for the UI layer of RHQ. There obviously
      are some candidate pages that one might suspect of a need for performance
      enhancements but which ones to pick? The first thing to decide was to
      actually determine how to measure the performance of the system. One of
      the obvious metrics to use is the response time of the HTTP requests.
      This would be a good start because it’d give me a basic understanding of
      where the problems might lie. I’d have the starting point to start my
      search for performance bottlenecks in the URLs that exhibit slow
      response times. On the other hand the results could be skewed by
      environmental parameters out of my control like network lag and such
      like. But since I had the access to the server I wanted to test on, I
      could do better by measuring metrics on the server itself. On the server
      side I have much broader choice of what and how I want to measure. If I
      wanted to I could even insert &quot;probes&quot; into the server to collect stats
      that are otherwise unobtainable from outside of the server’s JVM. I
      needed to test several areas of UI using one common testing &quot;algorithm&quot;.
      I needed to simulate a number of users logging in into the UI and
      visiting a number of pages from the &quot;same area&quot; (or rather the same page
      with different query parameters). This simple scenario would give me the
      least performing areas of UI I could then focus on. To summarize, here
      is what I was after:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;don’t bother with response times on the client, i can get the same and
      more information on the server-side&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;look for memory hogs&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;look for CPU intensive tasks&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;ideally I want to know more than just the URL at which a bottleneck
      might be.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Measuring the memory can either be done by asking &lt;code&gt;ps&lt;/code&gt; command or the
      JVM itself can provide the heap dump or summary. Measuring CPU is best
      done just by &lt;code&gt;ps&lt;/code&gt;. The JVM can also provide a thread-dump on demand.
      Neither heap summary nor CPU usage nor the thread-dump can be collected
      from within the JVM in a simple way (if at all) so I couldn’t track each
      request directly using some kind of probe (i.e. adding a filter that
      would collect the data to the RHQ web application). All I could do was
      to track the request times (either by configuring the embedded Tomcat to
      produce access log or better by configuring the RHQ server itself to
      collect response time information about itself
      (&lt;a href=&quot;http://wiki.rhq-project.org/display/RHQ/Response+Time+Filter&quot;&gt;http://wiki.rhq-project.org/display/RHQ/Response+Time+Filter&lt;/a&gt;))
      and periodically collect the stats using an external script.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;technologies-used&quot;&gt;
      &lt;a class=&quot;anchor&quot; href=&quot;#technologies-used&quot;&gt;&lt;/a&gt;Technologies Used&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For generating the load on the server I used
      &lt;a href=&quot;http://jakarta.apache.org/jmeter/&quot;&gt;JMeter&lt;/a&gt;. The nice thing about this
      tool is that it is easily parametrized by data either on command-line or
      in CSV files. Checkout the very simple JMeter script that I used to
      generate the load I needed on the server. The script for starting and
      stopping the RHQ server and JMeter and collecting the stats on memory
      and CPU usage was simply written in Bash. I used an
      &lt;a href=&quot;http://www.r-project.org/&quot;&gt;R&lt;/a&gt; script to generate graphs out of the CSV
      files that the Bash script produces from the collected data. You can
      find all the source code at the end of this blog entry, if you are
      interested in trying it out yourself.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;interpreting-the-results&quot;&gt;
      &lt;a class=&quot;anchor&quot; href=&quot;#interpreting-the-results&quot;&gt;&lt;/a&gt;Interpreting The Results&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The script collects 3 kinds of statistics. The per-thread CPU usage, the
      JVM heap summary and the JVM thread dump. The scripts run N iterations
      and collect the data for each stat in each iteration and store it off in
      a file. After the script has finished collecting the data, it creates
      CSV files from the CPU usage and heap summary files for easier
      consumption of that data. Finally, if R is installed, the CSV files are
      converted into graphs (yet easier to digest). The JVM thread dump is
      collected so that one can get a basic idea about what each of the
      threads in the graph has been doing during the iterations (obviously
      this is not precise because of the time elapsed between the CPU usage
      and thread dump collections). Let’s take a look at an example graph of
      the CPU usage.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;../../../../../images/measuring_ui_performance__cpu_graph_example.png&quot; data-lightbox=&quot;1&quot;&gt;
      &lt;span class=&quot;image thumb&quot;&gt;&lt;img src=&quot;http://lukas.krejci.pw/images/measuring_ui_performance__cpu_graph_example.png&quot; alt=&quot;CPU Graph&quot; width=&quot;100%&quot;&gt;&lt;/span&gt;
      &lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In there, you can see that one of the threads dominates the CPU usage in
      the later iterations. This obviously is a sign of a problem. Taking note
      of the thread id (in the legend of the graph) and comparing it with a
      &lt;code&gt;&quot;tid&quot;&lt;/code&gt; of the threas in the thread dumps in various iterations reveals
      that that is the VM Thread doing garbage collection. Looking at the heap
      summary graph&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;../../../../../images/measuring_ui_performance__heap_graph_example.png&quot; data-lightbox=&quot;2&quot;&gt;
      &lt;span class=&quot;image thumb&quot;&gt;&lt;img src=&quot;http://lukas.krejci.pw/images/measuring_ui_performance__heap_graph_example.png&quot; alt=&quot;Heap Graph&quot; width=&quot;100%&quot;&gt;&lt;/span&gt;
      &lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;one can easily observe that the application was consuming just too much
      memory and that the GC, even though it tried really hard, couldn’t
      handle the load. From that point on, finding the offending code was as
      easy as taking a full heap dump before and after the test (using the
      jmap tool that comes with JDK) and finding out which classes contributed
      the most to the increased memory usage.
      &lt;a href=&quot;http://www.eclipse.org/mat/&quot;&gt;Eclipse Mat&lt;/a&gt; is a great tool for such tasks
      and finding the code that caused this issue was a breeze.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;tests-layout&quot;&gt;
      &lt;a class=&quot;anchor&quot; href=&quot;#tests-layout&quot;&gt;&lt;/a&gt;Tests Layout&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If you read all the way down here, you probably are interested in how is
      this all put together and how does the script obtain all that data. You
      can find the link to the complete source code at the end of this entry.
      The zip file you can download contains the bash scripts necessary to run
      the tests along with an example &quot;test suite&quot; containing the JMeter test
      file, example input data for it and example tests.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;*testsuite-runner*the bash script that will start the testsuite in the
      background&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;*testsuite-run*examines the testsuite directory and spawns the
      individual tests inside it&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;*test-run*runs a single test (i.e. starts RHQ server, starts JMeter
      with the test file, collects stats, stops JMeter, stops RHQ server and
      produces the outputs)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;example-testsuite&lt;/strong&gt; contains the testsuite files&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;input&lt;/strong&gt; a folder containing input data used in the tests. You will
      have to modify these files in order to make the tests work with your RHQ
      installation.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;tests&lt;/strong&gt; contains the tests directories&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The example invocation of the script would like like the following:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;code&gt;testsuite-runner path/to/rhq/server/install path/to/jmeter/install NUMBER_OF_STATS_COLLECTIONS path/to/the/testsuite/directory&lt;/code&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This command would start the testsuite in the background. For each test
      in the testsuite, an RHQ server and would be started, then a JMeter
      instance would be fired up with the test file for given testsuite and a
      the provided number of stats measurements would be taken in 10 second
      intervals. After that the JMeter and RHQ servers woul be taken down and
      the next test in the testsuite would be started.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;future-work&quot;&gt;
      &lt;a class=&quot;anchor&quot; href=&quot;#future-work&quot;&gt;&lt;/a&gt;Future work&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Obviously, these scripts are just a quick and dirty solution to my
      requirements and have much to be added to them to become truly automated
      and useful. For starters, the tests do not connect to the RHQ database
      which makes them tied to a particular RHQ inventory (at a defined point
      in time), because the inputs of the tests hardcode resource ids. The
      first enhancement would therefore be to rewrite the scripts in a more
      capable (scripting) language and make them database agnostic.&lt;/p&gt;
      &lt;/div&gt;
      &lt;hr&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The source files and an example testsuite can be downloaded from
      &lt;a href=&quot;http://www.box.net/shared/tqs4g3k3g9&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://lukas.krejci.pw/posts/2010/04/09/hello-world/</id>
    <title>System.println(&quot;Hello world!&quot;);</title>
    <updated>2014-11-24T23:25:00+01:00</updated>
    <published>2010-04-09T00:00:00+00:00</published>
    <link href="http://lukas.krejci.pw/posts/2010/04/09/hello-world/" rel="alternate" type="text/html" />
    <summary>
      
      Well, the time has come for me to reinvent the wheel. This is going to
      be a blog about stuff that I find interesting as I move along my way of
      an open-source developer.
      ...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Well, the time has come for me to reinvent the wheel. This is going to
      be a blog about stuff that I find interesting as I move along my way of
      an open-source developer.&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
</feed>
